!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK_Callback_Func	DJI_LIB/DJI_Pro_Link.h	/^typedef void (*ACK_Callback_Func)(ProHeader *pHeader);$/;"	t
ACK_SESSION_IDLE	DJI_LIB/DJI_Pro_Link.h	13;"	d
ACK_SESSION_IDLE	DJI_LIB/DJI_Pro_Rmu.h	29;"	d
ACK_SESSION_PROCESS	DJI_LIB/DJI_Pro_Link.h	14;"	d
ACK_SESSION_PROCESS	DJI_LIB/DJI_Pro_Rmu.h	30;"	d
ACK_SESSION_USING	DJI_LIB/DJI_Pro_Link.h	15;"	d
ACK_SESSION_USING	DJI_LIB/DJI_Pro_Rmu.h	31;"	d
ACK_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^typedef struct ACK_Session_Tab$/;"	s
ACK_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^}ACK_Session_Tab;$/;"	t	typeref:struct:ACK_Session_Tab
ACK_Session_Tab::mmu	DJI_LIB/DJI_Pro_Rmu.h	/^	MMU_Tab *mmu;$/;"	m	struct:ACK_Session_Tab	access:public
ACK_Session_Tab::res	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int res:25;$/;"	m	struct:ACK_Session_Tab	access:public
ACK_Session_Tab::session_id	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_id : 5;$/;"	m	struct:ACK_Session_Tab	access:public
ACK_Session_Tab::session_status	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_status:2;$/;"	m	struct:ACK_Session_Tab	access:public
API_CAMERA_SHOT	DJI_LIB/DJI_Pro_App.h	44;"	d
API_CAMERA_VIDEO_START	DJI_LIB/DJI_Pro_App.h	45;"	d
API_CAMERA_VIDEO_STOP	DJI_LIB/DJI_Pro_App.h	46;"	d
API_CMD_REQUEST	DJI_LIB/DJI_Pro_App.h	22;"	d
API_CMD_STATUS_REQUEST	DJI_LIB/DJI_Pro_App.h	23;"	d
API_CTRL_GIMBAL_SPEED	DJI_LIB/DJI_Pro_App.h	37;"	d
API_CTRL_MANAGEMENT	DJI_LIB/DJI_Pro_App.h	19;"	d
API_CTRL_REQUEST	DJI_LIB/DJI_Pro_App.h	24;"	d
API_GIMBAL_CTRL_ANGLE_REQUEST	DJI_LIB/DJI_Pro_App.h	28;"	d
API_GIMBAL_CTRL_SPEED_REQUEST	DJI_LIB/DJI_Pro_App.h	27;"	d
API_INFO_QUERY	DJI_LIB/DJI_Pro_App.h	41;"	d
API_MISSION_HP_CMD	DJI_LIB/DJI_Pro_App.h	35;"	d
API_MISSION_HP_START	DJI_LIB/DJI_Pro_App.h	34;"	d
API_MISSION_WP_CMD	DJI_LIB/DJI_Pro_App.h	32;"	d
API_MISSION_WP_DATA	DJI_LIB/DJI_Pro_App.h	31;"	d
API_MISSION_WP_INFO	DJI_LIB/DJI_Pro_App.h	30;"	d
API_OPEN_SERIAL	DJI_LIB/DJI_Pro_App.h	20;"	d
API_SIM_ECHO	DJI_LIB/DJI_Pro_App.h	42;"	d
API_STD_DATA	DJI_LIB/DJI_Pro_App.h	21;"	d
API_TRANSPARENT_DATA_TO_MOBILE	DJI_LIB/DJI_Pro_App.h	25;"	d
API_TRANSPARENT_DATA_TO_OBOARD	DJI_LIB/DJI_Pro_App.h	26;"	d
API_USER_ACTIVATION	DJI_LIB/DJI_Pro_App.h	40;"	d
API_VERSION_QUERY	DJI_LIB/DJI_Pro_App.h	39;"	d
API_VER_QUERY	DJI_LIB/DJI_Pro_App.h	18;"	d
APP_Recv_Hook	DJI_LIB/DJI_Pro_Link.cpp	/^static Req_Callback_Func APP_Recv_Hook = 0;$/;"	v	file:
ATTRIBUTE_NAME	tinyxml2.h	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon21
ATTRIBUTE_VALUE	tinyxml2.h	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
ATTRIBUTE_VALUE_LEAVE_ENTITIES	tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
Accept	tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
Activate_API_Thread_Func	DJI_LIB/DJI_Pro_App.cpp	/^static void * Activate_API_Thread_Func(void * arg)$/;"	f	file:	signature:(void * arg)
AddSupportVector	LaRank.cpp	/^int LaRank::AddSupportVector(SupportPattern* x, int y, double g)$/;"	f	class:LaRank	signature:(SupportPattern* x, int y, double g)
AddSupportVector	LaRank.h	/^	int AddSupportVector(SupportPattern* x, int y, double g);$/;"	p	class:LaRank	access:private	signature:(SupportPattern* x, int y, double g)
Alloc	tinyxml2.h	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
Alloc	tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
Area	Rect.h	/^	inline T Area() const { return m_width * m_height; }$/;"	f	class:Rect	access:public	signature:() const
Attribute	tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
Attribute	tinyxml2.h	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
BACK_TO_TABLES	DJI_LIB/DJI_Pro_Codec.cpp	36;"	d	file:
BLACK	GraphUtils.cpp	/^const CvScalar BLACK = CV_RGB(0,0,0);$/;"	v
BUF_SIZE	tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon27
BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon24
BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon26
Baud_index	DJI_LIB/DJI_Pro_Hw.cpp	/^}Baud_index;$/;"	t	typeref:struct:__anon20	file:
Block	tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
BoolAttribute	tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
BoolValue	tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
BudgetMaintenance	LaRank.cpp	/^void LaRank::BudgetMaintenance()$/;"	f	class:LaRank	signature:()
BudgetMaintenance	LaRank.h	/^	void BudgetMaintenance();$/;"	p	class:LaRank	access:private	signature:()
BudgetMaintenanceRemove	LaRank.cpp	/^void LaRank::BudgetMaintenanceRemove()$/;"	f	class:LaRank	signature:()
BudgetMaintenanceRemove	LaRank.h	/^	void BudgetMaintenanceRemove();$/;"	p	class:LaRank	access:private	signature:()
CARRIAGE_RETURN	tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= (char)0x0d;			\/\/ CR gets filtered out$/;"	v	file:
CData	tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
CLOSED	tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon25
CLOSING	tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon25
CMD_RECIEVE	DJI_LIB/DJI_Pro_App.h	231;"	d
CMD_SESSION_0	DJI_LIB/DJI_Pro_Rmu.h	33;"	d
CMD_SESSION_1	DJI_LIB/DJI_Pro_Rmu.h	34;"	d
CMD_SESSION_AUTO	DJI_LIB/DJI_Pro_Rmu.h	35;"	d
CMD_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^typedef struct CMD_Session_Tab$/;"	s
CMD_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^}CMD_Session_Tab;$/;"	t	typeref:struct:CMD_Session_Tab
CMD_Session_Tab::ack_callback	DJI_LIB/DJI_Pro_Rmu.h	/^	ACK_Callback_Func ack_callback;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::ack_timeout	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int ack_timeout : 16;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::mmu	DJI_LIB/DJI_Pro_Rmu.h	/^	MMU_Tab *mmu;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::pre_seq_num	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int pre_seq_num;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::pre_timestamp	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int pre_timestamp;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::retry_send_time	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int retry_send_time : 5;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::sent_time	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int sent_time : 5;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::session_id	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_id : 5;$/;"	m	struct:CMD_Session_Tab	access:public
CMD_Session_Tab::usage_flag	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int usage_flag : 1;$/;"	m	struct:CMD_Session_Tab	access:public
COLLAPSE_WHITESPACE	tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	tinyxml2.h	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon21
CONFIG_H	Config.h	29;"	d
COUNT	tinyxml2.h	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon23
CR	tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CRC_INIT	DJI_LIB/DJI_Pro_Codec.cpp	/^const unsigned short CRC_INIT = 0x3AA3;$/;"	v
CStr	tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
CStrSize	tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
Call_APP_Func	DJI_LIB/DJI_Pro_Link.cpp	/^static ACK_Callback_Func Call_APP_Func = 0;$/;"	v	file:
CameraShow	main.cpp	/^void *CameraShow(void *argc)$/;"	f	signature:(void *argc)
Capacity	tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Chi2Kernel	Kernels.h	/^class Chi2Kernel : public Kernel$/;"	c	inherits:Kernel
Chi2Kernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:Chi2Kernel	access:public	signature:(const Eigen::VectorXd& x) const
Chi2Kernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:Chi2Kernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Chunk	tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
Clear	tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument	signature:()
Clear	tinyxml2.h	/^    virtual void Clear() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
Clear	tinyxml2.h	/^    void Clear();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
ClearBuffer	tinyxml2.h	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
CloseElement	tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool compactMode )
CloseElement	tinyxml2.h	/^    virtual void CloseElement( bool compactMode=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool compactMode=false )
ClosingType	tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
CollapseWhitespace	tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
CollapseWhitespace	tinyxml2.h	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
Command_Result_Notify	DJI_LIB/DJI_Pro_App.h	/^typedef void (*Command_Result_Notify)(unsigned short result);$/;"	t
CompactMode	tinyxml2.h	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }$/;"	f	class:tinyxml2::XMLPrinter	access:protected	signature:( const XMLElement& )
ComputeDual	LaRank.cpp	/^double LaRank::ComputeDual() const$/;"	f	class:LaRank	signature:() const
ComputeDual	LaRank.h	/^	double ComputeDual() const;$/;"	p	class:LaRank	access:private	signature:() const
Config	Config.cpp	/^Config::Config(const std::string& path)$/;"	f	class:Config	signature:(const std::string& path)
Config	Config.h	/^	Config() { SetDefaults(); }$/;"	f	class:Config	access:public	signature:()
Config	Config.h	/^	Config(const std::string& path);$/;"	p	class:Config	access:public	signature:(const std::string& path)
Config	Config.h	/^class Config$/;"	c
Config::Config	Config.cpp	/^Config::Config(const std::string& path)$/;"	f	class:Config	signature:(const std::string& path)
Config::Config	Config.h	/^	Config() { SetDefaults(); }$/;"	f	class:Config	access:public	signature:()
Config::Config	Config.h	/^	Config(const std::string& path);$/;"	p	class:Config	access:public	signature:(const std::string& path)
Config::FeatureKernelPair	Config.h	/^	struct FeatureKernelPair$/;"	s	class:Config	access:public
Config::FeatureKernelPair::feature	Config.h	/^		FeatureType feature;$/;"	m	struct:Config::FeatureKernelPair	access:public
Config::FeatureKernelPair::kernel	Config.h	/^		KernelType kernel;$/;"	m	struct:Config::FeatureKernelPair	access:public
Config::FeatureKernelPair::params	Config.h	/^		std::vector<double> params;$/;"	m	struct:Config::FeatureKernelPair	access:public
Config::FeatureName	Config.cpp	/^std::string Config::FeatureName(FeatureType f)$/;"	f	class:Config	signature:(FeatureType f)
Config::FeatureName	Config.h	/^	static std::string FeatureName(FeatureType f);$/;"	p	class:Config	access:private	signature:(FeatureType f)
Config::FeatureType	Config.h	/^	enum FeatureType$/;"	g	class:Config	access:public
Config::KernelName	Config.cpp	/^std::string Config::KernelName(KernelType k)$/;"	f	class:Config	signature:(KernelType k)
Config::KernelName	Config.h	/^	static std::string KernelName(KernelType k);$/;"	p	class:Config	access:private	signature:(KernelType k)
Config::KernelType	Config.h	/^	enum KernelType$/;"	g	class:Config	access:public
Config::SetDefaults	Config.cpp	/^void Config::SetDefaults()$/;"	f	class:Config	signature:()
Config::SetDefaults	Config.h	/^	void SetDefaults();$/;"	p	class:Config	access:private	signature:()
Config::debugMode	Config.h	/^	bool							debugMode;$/;"	m	class:Config	access:public
Config::features	Config.h	/^	std::vector<FeatureKernelPair>	features;$/;"	m	class:Config	access:public
Config::frameHeight	Config.h	/^	int								frameHeight;$/;"	m	class:Config	access:public
Config::frameWidth	Config.h	/^	int								frameWidth;$/;"	m	class:Config	access:public
Config::kFeatureTypeHaar	Config.h	/^		kFeatureTypeHaar,$/;"	e	enum:Config::FeatureType
Config::kFeatureTypeHistogram	Config.h	/^		kFeatureTypeHistogram$/;"	e	enum:Config::FeatureType
Config::kFeatureTypeRaw	Config.h	/^		kFeatureTypeRaw,$/;"	e	enum:Config::FeatureType
Config::kKernelTypeChi2	Config.h	/^		kKernelTypeChi2$/;"	e	enum:Config::KernelType
Config::kKernelTypeGaussian	Config.h	/^		kKernelTypeGaussian,$/;"	e	enum:Config::KernelType
Config::kKernelTypeIntersection	Config.h	/^		kKernelTypeIntersection,$/;"	e	enum:Config::KernelType
Config::kKernelTypeLinear	Config.h	/^		kKernelTypeLinear,$/;"	e	enum:Config::KernelType
Config::operator <<	Config.h	/^	friend std::ostream& operator<< (std::ostream& out, const Config& conf);$/;"	p	class:Config	access:friend	signature:(std::ostream& out, const Config& conf)
Config::quietMode	Config.h	/^	bool							quietMode;$/;"	m	class:Config	access:public
Config::resultsPath	Config.h	/^	std::string						resultsPath;$/;"	m	class:Config	access:public
Config::searchRadius	Config.h	/^	int								searchRadius;$/;"	m	class:Config	access:public
Config::seed	Config.h	/^	int								seed;$/;"	m	class:Config	access:public
Config::sequenceBasePath	Config.h	/^	std::string						sequenceBasePath;$/;"	m	class:Config	access:public
Config::sequenceName	Config.h	/^	std::string						sequenceName;$/;"	m	class:Config	access:public
Config::svmBudgetSize	Config.h	/^	int								svmBudgetSize;$/;"	m	class:Config	access:public
Config::svmC	Config.h	/^	double							svmC;$/;"	m	class:Config	access:public
ConvertUTF32ToUTF8	tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
ConvertUTF32ToUTF8	tinyxml2.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
CurrentAllocs	tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
DATA_MAX_SIZE	DJI_LIB/DJI_Pro_App.h	221;"	d
DEBUG	tinyxml2.h	54;"	d
DEFAULT	GraphUtils.h	23;"	d
DEFAULT	GraphUtils.h	25;"	d
DJI_ACK_Session_Tab	DJI_LIB/DJI_Pro_Rmu.cpp	/^static ACK_Session_Tab DJI_ACK_Session_Tab[SESSION_TABLE_NUM - 1]; \/\/session 0 is a nak session id$/;"	v	file:
DJI_CMD_Session_Tab	DJI_LIB/DJI_Pro_Rmu.cpp	/^static CMD_Session_Tab DJI_CMD_Session_Tab[SESSION_TABLE_NUM];$/;"	v	file:
DJI_MMU_Tab	DJI_LIB/DJI_Pro_Rmu.cpp	/^static MMU_Tab DJI_MMU_Tab[MMU_TABLE_NUM];$/;"	v	file:
DJI_PRO_HW_BUFFER_SIZE	DJI_LIB/DJI_Pro_Hw.h	19;"	d
DJI_PRO_LINK_H_	DJI_LIB/DJI_Pro_Link.h	9;"	d
DJI_PRO_RMU_H_	DJI_LIB/DJI_Pro_Rmu.h	9;"	d
DJI_PRO_SAMPLE_H_	DJI_Pro_Sample.h	9;"	d
DJI_Pro_Activate_API	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Activate_API(activate_data_t *p_user_data,$/;"	f	signature:(activate_data_t *p_user_data, Command_Result_Notify user_notice_entrance)
DJI_Pro_Activate_API	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Activate_API(activate_data_t *p_user_data,$/;"	p	signature:(activate_data_t *p_user_data, Command_Result_Notify user_notice_entrance)
DJI_Pro_Activate_API_CallBack	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Activate_API_CallBack(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_App_Recv_Req_Data	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_App_Recv_Req_Data(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_App_Send_Ack	DJI_LIB/DJI_Pro_App.cpp	/^void DJI_Pro_App_Send_Ack(req_id_t req_id, unsigned char *ack, int len)$/;"	f	signature:(req_id_t req_id, unsigned char *ack, int len)
DJI_Pro_App_Send_Ack	DJI_LIB/DJI_Pro_App.h	/^void DJI_Pro_App_Send_Ack(req_id_t req_id, unsigned char *ack, int len);$/;"	p	signature:(req_id_t req_id, unsigned char *ack, int len)
DJI_Pro_App_Send_Data	DJI_LIB/DJI_Pro_App.cpp	/^void DJI_Pro_App_Send_Data(unsigned char session_mode, unsigned char is_enc, unsigned char  cmd_set, unsigned char cmd_id,$/;"	f	signature:(unsigned char session_mode, unsigned char is_enc, unsigned char cmd_set, unsigned char cmd_id, unsigned char *pdata,int len,ACK_Callback_Func ack_callback, int timeout ,int retry_time)
DJI_Pro_App_Send_Data	DJI_LIB/DJI_Pro_App.h	/^void DJI_Pro_App_Send_Data(unsigned char session_mode, unsigned char is_enc, unsigned char  cmd_set, unsigned char cmd_id,$/;"	p	signature:(unsigned char session_mode, unsigned char is_enc, unsigned char cmd_set, unsigned char cmd_id, unsigned char *pdata,int len,ACK_Callback_Func ack_callback, int timeout, int retry_time)
DJI_Pro_Attitude_Control	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Attitude_Control(attitude_data_t *p_user_data)$/;"	f	signature:(attitude_data_t *p_user_data)
DJI_Pro_Attitude_Control	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Attitude_Control(attitude_data_t *p_user_data);$/;"	p	signature:(attitude_data_t *p_user_data)
DJI_Pro_Camera_Control	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Camera_Control(unsigned char camera_cmd)$/;"	f	signature:(unsigned char camera_cmd)
DJI_Pro_Camera_Control	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Camera_Control(unsigned char camera_cmd);$/;"	p	signature:(unsigned char camera_cmd)
DJI_Pro_Control_Management	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Control_Management(unsigned char cmd,Command_Result_Notify user_notice_entrance)$/;"	f	signature:(unsigned char cmd,Command_Result_Notify user_notice_entrance)
DJI_Pro_Control_Management	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Control_Management(unsigned char cmd,$/;"	p	signature:(unsigned char cmd, Command_Result_Notify user_notice_entrance)
DJI_Pro_Control_Management_CallBack	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Control_Management_CallBack(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_Create_Thread	DJI_LIB/DJI_Pro_App.cpp	/^static int DJI_Pro_Create_Thread(void *(* func)(void *), void *arg)$/;"	f	file:	signature:(void *(* func)(void *), void *arg)
DJI_Pro_Get_API_Version	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_API_Version(Get_API_Version_Notify user_notice_entrance)$/;"	f	signature:(Get_API_Version_Notify user_notice_entrance)
DJI_Pro_Get_API_Version	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_API_Version(Get_API_Version_Notify user_notice_entrance);$/;"	p	signature:(Get_API_Version_Notify user_notice_entrance)
DJI_Pro_Get_API_Version_CallBack	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Get_API_Version_CallBack(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_Get_Bat_Capacity	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_Bat_Capacity(unsigned char *p_user_buf)$/;"	f	signature:(unsigned char *p_user_buf)
DJI_Pro_Get_Bat_Capacity	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_Bat_Capacity(unsigned char *data);$/;"	p	signature:(unsigned char *data)
DJI_Pro_Get_Broadcast_Data	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_Broadcast_Data(sdk_std_msg_t *p_user_buf) {$/;"	f	signature:(sdk_std_msg_t *p_user_buf)
DJI_Pro_Get_Broadcast_Data	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_Broadcast_Data(sdk_std_msg_t *p_user_buf);$/;"	p	signature:(sdk_std_msg_t *p_user_buf)
DJI_Pro_Get_Cfg	DJI_Pro_Sample.cpp	/^int DJI_Pro_Get_Cfg(int *baud, char *dev,unsigned int *app_id, unsigned int *app_api_level,char *app_key)$/;"	f	signature:(int *baud, char *dev,unsigned int *app_id, unsigned int *app_api_level,char *app_key)
DJI_Pro_Get_Cfg	DJI_Pro_Sample.h	/^int DJI_Pro_Get_Cfg(int *baud, char *dev,unsigned int *app_id,$/;"	p	signature:(int *baud, char *dev,unsigned int *app_id, unsigned int *app_api_level,char *app_key)
DJI_Pro_Get_CmdCode_Id	DJI_LIB/DJI_Pro_App.cpp	/^unsigned char DJI_Pro_Get_CmdCode_Id(ProHeader *header)$/;"	f	signature:(ProHeader *header)
DJI_Pro_Get_CmdCode_Id	DJI_LIB/DJI_Pro_App.h	/^unsigned char DJI_Pro_Get_CmdCode_Id(ProHeader *header);$/;"	p	signature:(ProHeader *header)
DJI_Pro_Get_CmdSet_Id	DJI_LIB/DJI_Pro_App.cpp	/^unsigned char DJI_Pro_Get_CmdSet_Id(ProHeader *header)$/;"	f	signature:(ProHeader *header)
DJI_Pro_Get_CmdSet_Id	DJI_LIB/DJI_Pro_App.h	/^unsigned char DJI_Pro_Get_CmdSet_Id(ProHeader *header);$/;"	p	signature:(ProHeader *header)
DJI_Pro_Get_CtrlInfo	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_CtrlInfo(api_ctrl_info_data_t *p_user_buf)$/;"	f	signature:(api_ctrl_info_data_t *p_user_buf)
DJI_Pro_Get_CtrlInfo	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_CtrlInfo(api_ctrl_info_data_t *p_user_buf);$/;"	p	signature:(api_ctrl_info_data_t *p_user_buf)
DJI_Pro_Get_GimbalInfo	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_GimbalInfo(api_common_data_t *p_user_buf)$/;"	f	signature:(api_common_data_t *p_user_buf)
DJI_Pro_Get_GimbalInfo	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_GimbalInfo(api_common_data_t *p_user_buf);$/;"	p	signature:(api_common_data_t *p_user_buf)
DJI_Pro_Get_GroundAcc	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_GroundAcc(api_common_data_t *p_user_buf)$/;"	f	signature:(api_common_data_t *p_user_buf)
DJI_Pro_Get_GroundAcc	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_GroundAcc(api_common_data_t *p_user_buf);$/;"	p	signature:(api_common_data_t *p_user_buf)
DJI_Pro_Get_GroundVo	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_GroundVo(api_vel_data_t *p_user_buf)$/;"	f	signature:(api_vel_data_t *p_user_buf)
DJI_Pro_Get_GroundVo	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_GroundVo(api_vel_data_t *p_user_buf);$/;"	p	signature:(api_vel_data_t *p_user_buf)
DJI_Pro_Get_Quaternion	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Get_Quaternion(api_quaternion_data_t *p_user_buf)$/;"	f	signature:(api_quaternion_data_t *p_user_buf)
DJI_Pro_Get_Quaternion	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Get_Quaternion(api_quaternion_data_t *p_user_buf);$/;"	p	signature:(api_quaternion_data_t *p_user_buf)
DJI_Pro_Gimbal_Angle_Control	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Gimbal_Angle_Control(gimbal_custom_control_angle_t *p_user_data)$/;"	f	signature:(gimbal_custom_control_angle_t *p_user_data)
DJI_Pro_Gimbal_Angle_Control	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Gimbal_Angle_Control(gimbal_custom_control_angle_t *p_user_data);$/;"	p	signature:(gimbal_custom_control_angle_t *p_user_data)
DJI_Pro_Gimbal_Speed_Control	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Gimbal_Speed_Control(gimbal_custom_speed_t *p_user_data)$/;"	f	signature:(gimbal_custom_speed_t *p_user_data)
DJI_Pro_Gimbal_Speed_Control	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Gimbal_Speed_Control(gimbal_custom_speed_t *p_user_data);$/;"	p	signature:(gimbal_custom_speed_t *p_user_data)
DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw::DJI_Pro_Hw(QObject *parent) :$/;"	f	class:DJI_Pro_Hw	signature:(QObject *parent)
DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    explicit DJI_Pro_Hw(QObject *parent = 0);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QObject *parent = 0)
DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    explicit DJI_Pro_Hw(QString name,int baudrate);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QString name,int baudrate)
DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^class DJI_Pro_Hw : public QThread$/;"	c	inherits:QThread
DJI_Pro_Hw::DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw::DJI_Pro_Hw(QObject *parent) :$/;"	f	class:DJI_Pro_Hw	signature:(QObject *parent)
DJI_Pro_Hw::DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    explicit DJI_Pro_Hw(QObject *parent = 0);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QObject *parent = 0)
DJI_Pro_Hw::DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    explicit DJI_Pro_Hw(QString name,int baudrate);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QString name,int baudrate)
DJI_Pro_Hw::Pro_Hw_Close	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Close()$/;"	f	class:DJI_Pro_Hw	signature:()
DJI_Pro_Hw::Pro_Hw_Close	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Close();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
DJI_Pro_Hw::Pro_Hw_Create_Instance	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw * DJI_Pro_Hw::Pro_Hw_Create_Instance(void)$/;"	f	class:DJI_Pro_Hw	signature:(void)
DJI_Pro_Hw::Pro_Hw_Create_Instance	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *Pro_Hw_Create_Instance(void);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(void)
DJI_Pro_Hw::Pro_Hw_Flush	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Flush()$/;"	f	class:DJI_Pro_Hw	signature:()
DJI_Pro_Hw::Pro_Hw_Flush	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Flush();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
DJI_Pro_Hw::Pro_Hw_Get_Instance	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw * DJI_Pro_Hw::Pro_Hw_Get_Instance(void)$/;"	f	class:DJI_Pro_Hw	signature:(void)
DJI_Pro_Hw::Pro_Hw_Get_Instance	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *Pro_Hw_Get_Instance(void);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(void)
DJI_Pro_Hw::Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Recv()$/;"	f	class:DJI_Pro_Hw	signature:()
DJI_Pro_Hw::Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Recv();$/;"	p	class:DJI_Pro_Hw	access:private	signature:()
DJI_Pro_Hw::Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.cpp	/^int DJI_Pro_Hw::Pro_Hw_Send(unsigned char *buf, int len)$/;"	f	class:DJI_Pro_Hw	signature:(unsigned char *buf, int len)
DJI_Pro_Hw::Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.h	/^    int Pro_Hw_Send(unsigned char *buf, int len);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(unsigned char *buf, int len)
DJI_Pro_Hw::Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.cpp	/^bool DJI_Pro_Hw::Pro_Hw_Setup(QString port_name,int baudrate)$/;"	f	class:DJI_Pro_Hw	signature:(QString port_name,int baudrate)
DJI_Pro_Hw::Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.h	/^    bool Pro_Hw_Setup(QString port_name,int baudrate);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QString port_name,int baudrate)
DJI_Pro_Hw::findindex	DJI_LIB/DJI_Pro_Hw.cpp	/^int DJI_Pro_Hw::findindex(int baudrate)$/;"	f	class:DJI_Pro_Hw	signature:(int baudrate)
DJI_Pro_Hw::findindex	DJI_LIB/DJI_Pro_Hw.h	/^    int findindex(int);$/;"	p	class:DJI_Pro_Hw	access:private	signature:(int)
DJI_Pro_Hw::load_con	DJI_LIB/DJI_Pro_Hw.h	/^    int load_con;$/;"	m	class:DJI_Pro_Hw	access:public
DJI_Pro_Hw::pbuffer	DJI_LIB/DJI_Pro_Hw.h	/^    unsigned char *pbuffer;$/;"	m	class:DJI_Pro_Hw	access:private
DJI_Pro_Hw::port	DJI_LIB/DJI_Pro_Hw.h	/^    QextSerialPort *port;$/;"	m	class:DJI_Pro_Hw	access:private
DJI_Pro_Hw::run	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::run()$/;"	f	class:DJI_Pro_Hw	signature:()
DJI_Pro_Hw::run	DJI_LIB/DJI_Pro_Hw.h	/^    void run();$/;"	p	class:DJI_Pro_Hw	access:protected	signature:()
DJI_Pro_Hw::serial_object	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw *DJI_Pro_Hw::serial_object = (DJI_Pro_Hw *)NULL;$/;"	m	class:DJI_Pro_Hw	file:
DJI_Pro_Hw::serial_object	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *serial_object;$/;"	m	class:DJI_Pro_Hw	access:public
DJI_Pro_Hw::~DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw::~DJI_Pro_Hw()$/;"	f	class:DJI_Pro_Hw	signature:()
DJI_Pro_Hw::~DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    ~DJI_Pro_Hw();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
DJI_Pro_Parse_Broadcast_Data	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Parse_Broadcast_Data(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_Register_Transparent_Transmission_Callback	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Register_Transparent_Transmission_Callback(Transparent_Transmission_Func user_rec_handler_entrance)$/;"	f	signature:(Transparent_Transmission_Func user_rec_handler_entrance)
DJI_Pro_Register_Transparent_Transmission_Callback	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Register_Transparent_Transmission_Callback(Transparent_Transmission_Func user_rec_handler_entrance);$/;"	p	signature:(Transparent_Transmission_Func user_rec_handler_entrance)
DJI_Pro_Rmu_Setup	DJI_LIB/DJI_Pro_Rmu.cpp	/^void DJI_Pro_Rmu_Setup(void)$/;"	f	signature:(void)
DJI_Pro_Rmu_Setup	DJI_LIB/DJI_Pro_Rmu.h	/^extern void DJI_Pro_Rmu_Setup(void);$/;"	p	signature:(void)
DJI_Pro_Send_To_Mobile_Device	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Send_To_Mobile_Device(unsigned char *data,unsigned char len,$/;"	f	signature:(unsigned char *data,unsigned char len, Command_Result_Notify user_notice_entrance)
DJI_Pro_Send_To_Mobile_Device	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Send_To_Mobile_Device(unsigned char *data,unsigned char len,$/;"	p	signature:(unsigned char *data,unsigned char len, Command_Result_Notify user_notice_entrance)
DJI_Pro_Send_To_Mobile_Device_CallBack	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Send_To_Mobile_Device_CallBack(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_Setup	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Setup(User_Handler_Func user_cmd_handler_entrance)$/;"	f	signature:(User_Handler_Func user_cmd_handler_entrance)
DJI_Pro_Setup	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Setup(User_Handler_Func user_cmd_handler_entrance);$/;"	p	signature:(User_Handler_Func user_cmd_handler_entrance)
DJI_Pro_Status_Ctrl	DJI_LIB/DJI_Pro_App.cpp	/^int DJI_Pro_Status_Ctrl(unsigned char cmd,Command_Result_Notify user_notice_entrance)$/;"	f	signature:(unsigned char cmd,Command_Result_Notify user_notice_entrance)
DJI_Pro_Status_Ctrl	DJI_LIB/DJI_Pro_App.h	/^int DJI_Pro_Status_Ctrl(unsigned char cmd,Command_Result_Notify user_notice_entrance);$/;"	p	signature:(unsigned char cmd,Command_Result_Notify user_notice_entrance)
DJI_Pro_Status_Ctrl_CallBack	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_Status_Ctrl_CallBack(ProHeader *header)$/;"	f	file:	signature:(ProHeader *header)
DJI_Pro_User_Activate_Callback	DJI_LIB/DJI_Pro_App.cpp	/^static void DJI_Pro_User_Activate_Callback(unsigned short ack)$/;"	f	file:	signature:(unsigned short ack)
DJI_SDK_PRO_VER	DJI_LIB/DJI_Pro_Link.h	11;"	d
DJI_Sample_Atti_Ctrl	DJI_Pro_Sample.cpp	/^int DJI_Sample_Atti_Ctrl(void)$/;"	f	signature:(void)
DJI_Sample_Atti_Ctrl	DJI_Pro_Sample.h	/^int DJI_Sample_Atti_Ctrl(void);$/;"	p	signature:(void)
DJI_Sample_Atti_Ctrl_Thread_Func	DJI_Pro_Sample.cpp	/^static void * DJI_Sample_Atti_Ctrl_Thread_Func(void *arg)$/;"	f	file:	signature:(void *arg)
DJI_Sample_Camera_Shot	DJI_Pro_Sample.cpp	/^void DJI_Sample_Camera_Shot()$/;"	f	signature:()
DJI_Sample_Camera_Shot	DJI_Pro_Sample.h	/^void DJI_Sample_Camera_Shot(void);$/;"	p	signature:(void)
DJI_Sample_Camera_Video_Start	DJI_Pro_Sample.cpp	/^void DJI_Sample_Camera_Video_Start()$/;"	f	signature:()
DJI_Sample_Camera_Video_Start	DJI_Pro_Sample.h	/^void DJI_Sample_Camera_Video_Start(void);$/;"	p	signature:(void)
DJI_Sample_Camera_Video_Stop	DJI_Pro_Sample.cpp	/^void DJI_Sample_Camera_Video_Stop()$/;"	f	signature:()
DJI_Sample_Camera_Video_Stop	DJI_Pro_Sample.h	/^void DJI_Sample_Camera_Video_Stop(void);$/;"	p	signature:(void)
DJI_Sample_Circle_By_Pos	DJI_Pro_Sample.cpp	/^void DJI_Sample_Circle_By_Pos()$/;"	f	signature:()
DJI_Sample_Circle_By_Pos	DJI_Pro_Sample.h	/^void DJI_Sample_Circle_By_Pos(void);$/;"	p	signature:(void)
DJI_Sample_Create_Thread	DJI_Pro_Sample.cpp	/^static int DJI_Sample_Create_Thread(void *(* func)(void *), void *arg)$/;"	f	file:	signature:(void *(* func)(void *), void *arg)
DJI_Sample_Drone_Status_Query	DJI_Pro_Sample.cpp	/^void DJI_Sample_Drone_Status_Query(void)$/;"	f	signature:(void)
DJI_Sample_Drone_Status_Query	DJI_Pro_Sample.h	/^void DJI_Sample_Drone_Status_Query(void);$/;"	p	signature:(void)
DJI_Sample_Funny_Ctrl	DJI_Pro_Sample.cpp	/^int DJI_Sample_Funny_Ctrl(char cmd)$/;"	f	signature:(char cmd)
DJI_Sample_Funny_Ctrl	DJI_Pro_Sample.h	/^int DJI_Sample_Funny_Ctrl(char cmd);$/;"	p	signature:(char cmd)
DJI_Sample_Funny_Ctrl_Thread_Func	DJI_Pro_Sample.cpp	/^static void * DJI_Sample_Funny_Ctrl_Thread_Func(void *arg)$/;"	f	file:	signature:(void *arg)
DJI_Sample_Gimbal_AngelCtrl	DJI_Pro_Sample.cpp	/^static void DJI_Sample_Gimbal_AngelCtrl(int16_t yaw_angle,$/;"	f	file:	signature:(int16_t yaw_angle, int16_t roll_angle, int16_t pitch_angle, uint8_t duration)
DJI_Sample_Gimbal_Ctrl	DJI_Pro_Sample.cpp	/^int DJI_Sample_Gimbal_Ctrl(void)$/;"	f	signature:(void)
DJI_Sample_Gimbal_Ctrl	DJI_Pro_Sample.h	/^int DJI_Sample_Gimbal_Ctrl(void);$/;"	p	signature:(void)
DJI_Sample_Gimbal_Ctrl_Thread_Func	DJI_Pro_Sample.cpp	/^static void * DJI_Sample_Gimbal_Ctrl_Thread_Func(void * arg)$/;"	f	file:	signature:(void * arg)
DJI_Sample_Gimbal_SpeedCtrl	DJI_Pro_Sample.cpp	/^static void DJI_Sample_Gimbal_SpeedCtrl(signed short yaw_angle_rate,$/;"	f	file:	signature:(signed short yaw_angle_rate, signed short roll_angle_rate, signed short pitch_angle_rate)
DJI_Sample_Send_To_Mobile_Device	DJI_Pro_Sample.cpp	/^void DJI_Sample_Send_To_Mobile_Device()$/;"	f	signature:()
DJI_Sample_Send_To_Mobile_Device	DJI_Pro_Sample.h	/^void DJI_Sample_Send_To_Mobile_Device(void);$/;"	p	signature:(void)
DJI_Sample_Setup	DJI_Pro_Sample.cpp	/^int DJI_Sample_Setup(void)$/;"	f	signature:(void)
DJI_Sample_Setup	DJI_Pro_Sample.h	/^int DJI_Sample_Setup(void);$/;"	p	signature:(void)
DJI_Sample_Square_By_Pos	DJI_Pro_Sample.cpp	/^void DJI_Sample_Square_By_Pos()$/;"	f	signature:()
DJI_Sample_Square_By_Pos	DJI_Pro_Sample.h	/^void DJI_Sample_Square_By_Pos(void);$/;"	p	signature:(void)
DOUBLE_QUOTE	tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
DRAW_CIRCLE_SAMPLE	DJI_Pro_Sample.h	18;"	d
DRAW_SQUARE_SAMPLE	DJI_Pro_Sample.h	19;"	d
Debug	LaRank.cpp	/^void LaRank::Debug()$/;"	f	class:LaRank	signature:()
Debug	LaRank.h	/^	virtual void Debug();$/;"	p	class:LaRank	access:public	signature:()
Debug	Tracker.cpp	/^void Tracker::Debug()$/;"	f	class:Tracker	signature:()
Debug	Tracker.h	/^	void Debug();$/;"	p	class:Tracker	access:public	signature:()
DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLElement	signature:( XMLAttribute* attribute )
DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
DeleteAttribute	tinyxml2.h	/^    static void DeleteAttribute( XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLAttribute* attribute )
DeleteAttribute	tinyxml2.h	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
DeleteChild	tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
DeleteChild	tinyxml2.h	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
DeleteChildren	tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
DeleteChildren	tinyxml2.h	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
DeleteNode	tinyxml2.cpp	/^void XMLDocument::DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLNode* node )
DeleteNode	tinyxml2.cpp	/^void XMLNode::DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
DeleteNode	tinyxml2.h	/^    static void DeleteNode( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* node )
DeleteNode	tinyxml2.h	/^    void DeleteNode( XMLNode* node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f	access:public
Display_Main_Menu	main.cpp	/^static void Display_Main_Menu(void)$/;"	f	file:	signature:(void)
Display_Memory_Info	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Display_Memory_Info(void)$/;"	f	signature:(void)
Display_Memory_Info	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Display_Memory_Info(void);$/;"	p	signature:(void)
DoubleAttribute	tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
DoubleValue	tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
DynArray	tinyxml2.h	/^    DynArray( const DynArray& ); \/\/ not supported$/;"	p	class:tinyxml2::DynArray	access:private	signature:( const DynArray& )
DynArray	tinyxml2.h	/^    DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
DynArray	tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
ENABLE_MSG_A	DJI_LIB/DJI_Pro_App.h	79;"	d
ENABLE_MSG_BATTERY	DJI_LIB/DJI_Pro_App.h	87;"	d
ENABLE_MSG_DEVICE	DJI_LIB/DJI_Pro_App.h	88;"	d
ENABLE_MSG_GIMBAL	DJI_LIB/DJI_Pro_App.h	85;"	d
ENABLE_MSG_MAG	DJI_LIB/DJI_Pro_App.h	83;"	d
ENABLE_MSG_POS	DJI_LIB/DJI_Pro_App.h	82;"	d
ENABLE_MSG_Q	DJI_LIB/DJI_Pro_App.h	78;"	d
ENABLE_MSG_RC	DJI_LIB/DJI_Pro_App.h	84;"	d
ENABLE_MSG_STATUS	DJI_LIB/DJI_Pro_App.h	86;"	d
ENABLE_MSG_TIME	DJI_LIB/DJI_Pro_App.h	77;"	d
ENABLE_MSG_V	DJI_LIB/DJI_Pro_App.h	80;"	d
ENABLE_MSG_W	DJI_LIB/DJI_Pro_App.h	81;"	d
ENTITY_RANGE	tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon27
ERR_INDEX	DJI_LIB/DJI_Pro_App.h	222;"	d
EXC_DATA_SIZE	DJI_LIB/DJI_Pro_App.h	223;"	d
Empty	tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Empty	tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
EnsureCapacity	tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
Entity	tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
Error	tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ErrorID	tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ErrorName	tinyxml2.cpp	/^const char* XMLDocument::ErrorName() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
ErrorName	tinyxml2.h	/^	const char* ErrorName() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
Eval	Features.h	/^	inline const Eigen::VectorXd& Eval(const Sample& s) const$/;"	f	class:Features	access:public	signature:(const Sample& s) const
Eval	Features.h	/^	virtual void Eval(const MultiSample& s, std::vector<Eigen::VectorXd>& featVecs)$/;"	f	class:Features	access:public	signature:(const MultiSample& s, std::vector<Eigen::VectorXd>& featVecs)
Eval	HaarFeature.cpp	/^float HaarFeature::Eval(const Sample& s) const$/;"	f	class:HaarFeature	signature:(const Sample& s) const
Eval	HaarFeature.h	/^	float Eval(const Sample& s) const;$/;"	p	class:HaarFeature	access:public	signature:(const Sample& s) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:Chi2Kernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:GaussianKernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:IntersectionKernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:LinearKernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:MultiKernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:Chi2Kernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:GaussianKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:IntersectionKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:LinearKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:MultiKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	Kernels.h	/^	virtual double Eval(const Eigen::VectorXd& x) const = 0;$/;"	p	class:Kernel	access:public	signature:(const Eigen::VectorXd& x) const
Eval	Kernels.h	/^	virtual double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const = 0;$/;"	p	class:Kernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
Eval	LaRank.cpp	/^void LaRank::Eval(const MultiSample& sample, std::vector<double>& results)$/;"	f	class:LaRank	signature:(const MultiSample& sample, std::vector<double>& results)
Eval	LaRank.h	/^	virtual void Eval(const MultiSample& x, std::vector<double>& results);$/;"	p	class:LaRank	access:public	signature:(const MultiSample& x, std::vector<double>& results)
Evaluate	LaRank.cpp	/^double LaRank::Evaluate(const Eigen::VectorXd& x, const FloatRect& y) const$/;"	f	class:LaRank	signature:(const Eigen::VectorXd& x, const FloatRect& y) const
Evaluate	LaRank.h	/^	double Evaluate(const Eigen::VectorXd& x, const FloatRect& y) const;$/;"	p	class:LaRank	access:private	signature:(const Eigen::VectorXd& x, const FloatRect& y) const
F	DJI_LIB/DJI_Pro_Codec.cpp	33;"	d	file:
FD	DJI_LIB/DJI_Pro_Codec.cpp	34;"	d	file:
FEATURES_H	Features.h	29;"	d
FeatureKernelPair	Config.h	/^	struct FeatureKernelPair$/;"	s	class:Config	access:public
FeatureName	Config.cpp	/^std::string Config::FeatureName(FeatureType f)$/;"	f	class:Config	signature:(FeatureType f)
FeatureName	Config.h	/^	static std::string FeatureName(FeatureType f);$/;"	p	class:Config	access:private	signature:(FeatureType f)
FeatureType	Config.h	/^	enum FeatureType$/;"	g	class:Config	access:public
Features	Features.cpp	/^Features::Features() :$/;"	f	class:Features	signature:()
Features	Features.h	/^	Features();$/;"	p	class:Features	access:public	signature:()
Features	Features.h	/^class Features$/;"	c
Features::Eval	Features.h	/^	inline const Eigen::VectorXd& Eval(const Sample& s) const$/;"	f	class:Features	access:public	signature:(const Sample& s) const
Features::Eval	Features.h	/^	virtual void Eval(const MultiSample& s, std::vector<Eigen::VectorXd>& featVecs)$/;"	f	class:Features	access:public	signature:(const MultiSample& s, std::vector<Eigen::VectorXd>& featVecs)
Features::Features	Features.cpp	/^Features::Features() :$/;"	f	class:Features	signature:()
Features::Features	Features.h	/^	Features();$/;"	p	class:Features	access:public	signature:()
Features::GetCount	Features.h	/^	inline int GetCount() const { return m_featureCount; }$/;"	f	class:Features	access:public	signature:() const
Features::SetCount	Features.cpp	/^void Features::SetCount(int c)$/;"	f	class:Features	signature:(int c)
Features::SetCount	Features.h	/^	void SetCount(int c);$/;"	p	class:Features	access:protected	signature:(int c)
Features::UpdateFeatureVector	Features.h	/^	virtual void UpdateFeatureVector(const Sample& s) = 0;$/;"	p	class:Features	access:protected	signature:(const Sample& s)
Features::m_featVec	Features.h	/^	Eigen::VectorXd m_featVec;$/;"	m	class:Features	access:protected
Features::m_featureCount	Features.h	/^	int m_featureCount;$/;"	m	class:Features	access:protected
FindAttribute	tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
FindAttribute	tinyxml2.h	/^    XMLAttribute* FindAttribute( const char* name ) {$/;"	f	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FindAttribute	tinyxml2.h	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FindNearest	.ycm_extra_conf.py	/^def FindNearest(path, target):$/;"	f	access:public
FindOrCreateAttribute	tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
FindOrCreateAttribute	tinyxml2.h	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FirstAttribute	tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
FirstChild	tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
FirstChild	tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
FirstChild	tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
FirstChild	tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
FirstChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
FirstChildElement	tinyxml2.h	/^    XMLElement* FirstChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
FirstChildElement	tinyxml2.h	/^    XMLHandle FirstChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
FirstChildElement	tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
FirstChildElement	tinyxml2.h	/^    const XMLElement* FirstChildElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
FlagsForClangComplete	.ycm_extra_conf.py	/^def FlagsForClangComplete(root):$/;"	f	access:public
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f	access:public
FlagsForInclude	.ycm_extra_conf.py	/^def FlagsForInclude(root):$/;"	f	access:public
FloatAttribute	tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FloatRect	Rect.h	/^typedef Rect<float> FloatRect;$/;"	t
FloatValue	tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Free	tinyxml2.h	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
Free	tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
Free_ACK_Session	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Free_ACK_Session(ACK_Session_Tab * session)$/;"	f	signature:(ACK_Session_Tab * session)
Free_ACK_Session	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Free_ACK_Session(ACK_Session_Tab * session);$/;"	p	signature:(ACK_Session_Tab * session)
Free_CMD_Session	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Free_CMD_Session(CMD_Session_Tab * session)$/;"	f	signature:(CMD_Session_Tab * session)
Free_CMD_Session	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Free_CMD_Session(CMD_Session_Tab * session);$/;"	p	signature:(CMD_Session_Tab * session)
Free_Memory	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Free_Memory(MMU_Tab *mmu_tab)$/;"	f	signature:(MMU_Tab *mmu_tab)
Free_Memory	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Free_Memory(MMU_Tab *mmu_tab);$/;"	p	signature:(MMU_Tab *mmu_tab)
Free_Memory_Lock	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Free_Memory_Lock(void)$/;"	f	signature:(void)
Free_Memory_Lock	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Free_Memory_Lock(void);$/;"	p	signature:(void)
GRAPH_UTILS_H	GraphUtils.h	7;"	d
GREY	GraphUtils.cpp	/^const CvScalar GREY = CV_RGB(150,150,150);$/;"	v
GaussianKernel	Kernels.h	/^	GaussianKernel(double sigma) : m_sigma(sigma) {}$/;"	f	class:GaussianKernel	access:public	signature:(double sigma)
GaussianKernel	Kernels.h	/^class GaussianKernel : public Kernel$/;"	c	inherits:Kernel
GaussianKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:GaussianKernel	access:public	signature:(const Eigen::VectorXd& x) const
GaussianKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:GaussianKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
GaussianKernel::GaussianKernel	Kernels.h	/^	GaussianKernel(double sigma) : m_sigma(sigma) {}$/;"	f	class:GaussianKernel	access:public	signature:(double sigma)
GaussianKernel::m_sigma	Kernels.h	/^	double m_sigma;$/;"	m	class:GaussianKernel	access:private
GenerateSystematic	HaarFeatures.cpp	/^void HaarFeatures::GenerateSystematic()$/;"	f	class:HaarFeatures	signature:()
GenerateSystematic	HaarFeatures.h	/^	void GenerateSystematic();$/;"	p	class:HaarFeatures	access:private	signature:()
GetBB	Tracker.h	/^	inline const FloatRect& GetBB() const { return m_bb; }$/;"	f	class:Tracker	access:public	signature:() const
GetCharacterRef	tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
GetCharacterRef	tinyxml2.h	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f	access:public
GetCount	Features.h	/^	inline int GetCount() const { return m_featureCount; }$/;"	f	class:Features	access:public	signature:() const
GetDocument	tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
GetDocument	tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
GetErrorStr1	tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetErrorStr2	tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetImage	ImageRep.h	/^	inline const cv::Mat& GetImage(int channel = 0) const { return m_images[channel]; }$/;"	f	class:ImageRep	access:public	signature:(int channel = 0) const
GetImage	Sample.h	/^	inline const ImageRep& GetImage() const { return m_image; }$/;"	f	class:MultiSample	access:public	signature:() const
GetImage	Sample.h	/^	inline const ImageRep& GetImage() const { return m_image; }$/;"	f	class:Sample	access:public	signature:() const
GetROI	Sample.h	/^	inline const FloatRect& GetROI() const { return m_roi; }$/;"	f	class:Sample	access:public	signature:() const
GetRect	ImageRep.h	/^	inline const IntRect& GetRect() const { return m_rect; }$/;"	f	class:ImageRep	access:public	signature:() const
GetRects	Sample.h	/^	inline const std::vector<FloatRect>& GetRects() const { return m_rects; }$/;"	f	class:MultiSample	access:public	signature:() const
GetSample	Sample.h	/^	inline Sample GetSample(int i) const { return Sample(m_image, m_rects[i]); }$/;"	f	class:MultiSample	access:public	signature:(int i) const
GetStr	tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
GetStr	tinyxml2.h	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
GetText	tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
GetText	tinyxml2.h	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
Get_ACK_Session_Tab	DJI_LIB/DJI_Pro_Rmu.cpp	/^ACK_Session_Tab * Get_ACK_Session_Tab(void)$/;"	f	signature:(void)
Get_ACK_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^extern ACK_Session_Tab * Get_ACK_Session_Tab(void);$/;"	p	signature:(void)
Get_API_Version_Notify	DJI_LIB/DJI_Pro_App.h	/^typedef void (*Get_API_Version_Notify)(version_query_data_t *);$/;"	t
Get_API_Version_Thread_Func	DJI_LIB/DJI_Pro_App.cpp	/^static void * Get_API_Version_Thread_Func(void * arg)$/;"	f	file:	signature:(void * arg)
Get_CMD_Session_Tab	DJI_LIB/DJI_Pro_Rmu.cpp	/^CMD_Session_Tab * Get_CMD_Session_Tab(void)$/;"	f	signature:(void)
Get_CMD_Session_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^extern CMD_Session_Tab * Get_CMD_Session_Tab(void);$/;"	p	signature:(void)
Get_Memory_Lock	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Get_Memory_Lock(void)$/;"	f	signature:(void)
Get_Memory_Lock	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Get_Memory_Lock(void);$/;"	p	signature:(void)
Get_Status_Ctrl_Return_Code	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned short Get_Status_Ctrl_Return_Code(void)$/;"	f	file:	signature:(void)
Get_TimeStamp	DJI_LIB/DJI_Pro_Link.cpp	/^unsigned int Get_TimeStamp(void)$/;"	f	signature:(void)
Get_TimeStamp	DJI_LIB/DJI_Pro_Link.h	/^unsigned int Get_TimeStamp(void);$/;"	p	signature:(void)
HAAR_FEATURES_H	HaarFeatures.h	29;"	d
HAAR_FEATURE_H	HaarFeature.h	29;"	d
HISTOGRAM_FEATURES_H	HistogramFeatures.h	29;"	d
HORIZ_ATT	DJI_LIB/DJI_Pro_App.h	48;"	d
HORIZ_BODY	DJI_LIB/DJI_Pro_App.h	60;"	d
HORIZ_GND	DJI_LIB/DJI_Pro_App.h	59;"	d
HORIZ_POS	DJI_LIB/DJI_Pro_App.h	50;"	d
HORIZ_VEL	DJI_LIB/DJI_Pro_App.h	49;"	d
HaarFeature	HaarFeature.cpp	/^HaarFeature::HaarFeature(const FloatRect& bb, int type) :$/;"	f	class:HaarFeature	signature:(const FloatRect& bb, int type)
HaarFeature	HaarFeature.h	/^	HaarFeature(const FloatRect& bb, int type);$/;"	p	class:HaarFeature	access:public	signature:(const FloatRect& bb, int type)
HaarFeature	HaarFeature.h	/^class HaarFeature$/;"	c
HaarFeature::Eval	HaarFeature.cpp	/^float HaarFeature::Eval(const Sample& s) const$/;"	f	class:HaarFeature	signature:(const Sample& s) const
HaarFeature::Eval	HaarFeature.h	/^	float Eval(const Sample& s) const;$/;"	p	class:HaarFeature	access:public	signature:(const Sample& s) const
HaarFeature::HaarFeature	HaarFeature.cpp	/^HaarFeature::HaarFeature(const FloatRect& bb, int type) :$/;"	f	class:HaarFeature	signature:(const FloatRect& bb, int type)
HaarFeature::HaarFeature	HaarFeature.h	/^	HaarFeature(const FloatRect& bb, int type);$/;"	p	class:HaarFeature	access:public	signature:(const FloatRect& bb, int type)
HaarFeature::m_bb	HaarFeature.h	/^	FloatRect m_bb;$/;"	m	class:HaarFeature	access:private
HaarFeature::m_factor	HaarFeature.h	/^	float m_factor;$/;"	m	class:HaarFeature	access:private
HaarFeature::m_rects	HaarFeature.h	/^	std::vector<FloatRect> m_rects;$/;"	m	class:HaarFeature	access:private
HaarFeature::m_weights	HaarFeature.h	/^	std::vector<float> m_weights;$/;"	m	class:HaarFeature	access:private
HaarFeature::~HaarFeature	HaarFeature.cpp	/^HaarFeature::~HaarFeature()$/;"	f	class:HaarFeature	signature:()
HaarFeature::~HaarFeature	HaarFeature.h	/^	~HaarFeature();$/;"	p	class:HaarFeature	access:public	signature:()
HaarFeatures	HaarFeatures.cpp	/^HaarFeatures::HaarFeatures(const Config& conf)$/;"	f	class:HaarFeatures	signature:(const Config& conf)
HaarFeatures	HaarFeatures.h	/^	HaarFeatures(const Config& conf);$/;"	p	class:HaarFeatures	access:public	signature:(const Config& conf)
HaarFeatures	HaarFeatures.h	/^class HaarFeatures : public Features$/;"	c	inherits:Features
HaarFeatures::GenerateSystematic	HaarFeatures.cpp	/^void HaarFeatures::GenerateSystematic()$/;"	f	class:HaarFeatures	signature:()
HaarFeatures::GenerateSystematic	HaarFeatures.h	/^	void GenerateSystematic();$/;"	p	class:HaarFeatures	access:private	signature:()
HaarFeatures::HaarFeatures	HaarFeatures.cpp	/^HaarFeatures::HaarFeatures(const Config& conf)$/;"	f	class:HaarFeatures	signature:(const Config& conf)
HaarFeatures::HaarFeatures	HaarFeatures.h	/^	HaarFeatures(const Config& conf);$/;"	p	class:HaarFeatures	access:public	signature:(const Config& conf)
HaarFeatures::UpdateFeatureVector	HaarFeatures.cpp	/^void HaarFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:HaarFeatures	signature:(const Sample& s)
HaarFeatures::UpdateFeatureVector	HaarFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:HaarFeatures	access:private	signature:(const Sample& s)
HaarFeatures::m_features	HaarFeatures.h	/^	std::vector<HaarFeature> m_features;$/;"	m	class:HaarFeatures	access:private
HasBOM	tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
Height	Rect.h	/^	inline T Height() const { return m_height; }$/;"	f	class:Rect	access:public	signature:() const
Hist	ImageRep.cpp	/^void ImageRep::Hist(const IntRect& rRect, Eigen::VectorXd& h) const$/;"	f	class:ImageRep	signature:(const IntRect& rRect, Eigen::VectorXd& h) const
Hist	ImageRep.h	/^	void Hist(const IntRect& rRect, Eigen::VectorXd& h) const;$/;"	p	class:ImageRep	access:public	signature:(const IntRect& rRect, Eigen::VectorXd& h) const
HistogramFeatures	HistogramFeatures.cpp	/^HistogramFeatures::HistogramFeatures(const Config& conf)$/;"	f	class:HistogramFeatures	signature:(const Config& conf)
HistogramFeatures	HistogramFeatures.h	/^	HistogramFeatures(const Config& conf);$/;"	p	class:HistogramFeatures	access:public	signature:(const Config& conf)
HistogramFeatures	HistogramFeatures.h	/^class HistogramFeatures : public Features$/;"	c	inherits:Features
HistogramFeatures::HistogramFeatures	HistogramFeatures.cpp	/^HistogramFeatures::HistogramFeatures(const Config& conf)$/;"	f	class:HistogramFeatures	signature:(const Config& conf)
HistogramFeatures::HistogramFeatures	HistogramFeatures.h	/^	HistogramFeatures(const Config& conf);$/;"	p	class:HistogramFeatures	access:public	signature:(const Config& conf)
HistogramFeatures::UpdateFeatureVector	HistogramFeatures.cpp	/^void HistogramFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:HistogramFeatures	signature:(const Sample& s)
HistogramFeatures::UpdateFeatureVector	HistogramFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:HistogramFeatures	access:private	signature:(const Sample& s)
IMAGE_REP_H	ImageRep.h	29;"	d
Identify	tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
Identify	tinyxml2.h	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
ImageRep	ImageRep.cpp	/^ImageRep::ImageRep(const Mat& image, bool computeIntegral, bool computeIntegralHist, bool colour) :$/;"	f	class:ImageRep	signature:(const Mat& image, bool computeIntegral, bool computeIntegralHist, bool colour)
ImageRep	ImageRep.h	/^	ImageRep(const cv::Mat& rImage, bool computeIntegral, bool computeIntegralHists, bool colour = false);$/;"	p	class:ImageRep	access:public	signature:(const cv::Mat& rImage, bool computeIntegral, bool computeIntegralHists, bool colour = false)
ImageRep	ImageRep.h	/^class ImageRep$/;"	c
ImageRep::GetImage	ImageRep.h	/^	inline const cv::Mat& GetImage(int channel = 0) const { return m_images[channel]; }$/;"	f	class:ImageRep	access:public	signature:(int channel = 0) const
ImageRep::GetRect	ImageRep.h	/^	inline const IntRect& GetRect() const { return m_rect; }$/;"	f	class:ImageRep	access:public	signature:() const
ImageRep::Hist	ImageRep.cpp	/^void ImageRep::Hist(const IntRect& rRect, Eigen::VectorXd& h) const$/;"	f	class:ImageRep	signature:(const IntRect& rRect, Eigen::VectorXd& h) const
ImageRep::Hist	ImageRep.h	/^	void Hist(const IntRect& rRect, Eigen::VectorXd& h) const;$/;"	p	class:ImageRep	access:public	signature:(const IntRect& rRect, Eigen::VectorXd& h) const
ImageRep::ImageRep	ImageRep.cpp	/^ImageRep::ImageRep(const Mat& image, bool computeIntegral, bool computeIntegralHist, bool colour) :$/;"	f	class:ImageRep	signature:(const Mat& image, bool computeIntegral, bool computeIntegralHist, bool colour)
ImageRep::ImageRep	ImageRep.h	/^	ImageRep(const cv::Mat& rImage, bool computeIntegral, bool computeIntegralHists, bool colour = false);$/;"	p	class:ImageRep	access:public	signature:(const cv::Mat& rImage, bool computeIntegral, bool computeIntegralHists, bool colour = false)
ImageRep::Sum	ImageRep.cpp	/^int ImageRep::Sum(const IntRect& rRect, int channel) const$/;"	f	class:ImageRep	signature:(const IntRect& rRect, int channel) const
ImageRep::Sum	ImageRep.h	/^	int Sum(const IntRect& rRect, int channel = 0) const;$/;"	p	class:ImageRep	access:public	signature:(const IntRect& rRect, int channel = 0) const
ImageRep::m_channels	ImageRep.h	/^	int m_channels;$/;"	m	class:ImageRep	access:private
ImageRep::m_images	ImageRep.h	/^	std::vector<cv::Mat> m_images;$/;"	m	class:ImageRep	access:private
ImageRep::m_integralHistImages	ImageRep.h	/^	std::vector<cv::Mat> m_integralHistImages;$/;"	m	class:ImageRep	access:private
ImageRep::m_integralImages	ImageRep.h	/^	std::vector<cv::Mat> m_integralImages;$/;"	m	class:ImageRep	access:private
ImageRep::m_rect	ImageRep.h	/^	IntRect m_rect;$/;"	m	class:ImageRep	access:private
ImageThread	ImageThread.cpp	/^void ImageThread()$/;"	f	signature:()
ImageThread	ImageThread.h	/^void ImageThread(imagepoint *p_user_buf);$/;"	p	signature:(imagepoint *p_user_buf)
Initialise	Tracker.cpp	/^void Tracker::Initialise(const cv::Mat& frame, FloatRect bb)$/;"	f	class:Tracker	signature:(const cv::Mat& frame, FloatRect bb)
Initialise	Tracker.h	/^	void Initialise(const cv::Mat& frame, FloatRect bb);$/;"	p	class:Tracker	access:public	signature:(const cv::Mat& frame, FloatRect bb)
InsertAfterChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertAfterChild	tinyxml2.h	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertChildPreamble	tinyxml2.cpp	/^void XMLNode::InsertChildPreamble( XMLNode* insertThis ) const$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* insertThis ) const
InsertChildPreamble	tinyxml2.h	/^    void InsertChildPreamble( XMLNode* insertThis ) const;$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* insertThis ) const
InsertEndChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertEndChild	tinyxml2.h	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
InsertFirstChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertFirstChild	tinyxml2.h	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
IntAttribute	tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
IntRect	Rect.h	/^typedef Rect<int> IntRect;$/;"	t
IntValue	tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
IntersectionKernel	Kernels.h	/^class IntersectionKernel : public Kernel$/;"	c	inherits:Kernel
IntersectionKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:IntersectionKernel	access:public	signature:(const Eigen::VectorXd& x) const
IntersectionKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:IntersectionKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f	access:public
IsInitialised	Tracker.h	/^	inline bool IsInitialised() const { return m_initialised; }$/;"	f	class:Tracker	access:public	signature:() const
IsInside	Rect.h	/^	bool IsInside(const Rect<T2>& rOther) const;$/;"	p	class:Rect	access:public	signature:(const Rect<T2>& rOther) const
IsInside	Rect.h	/^bool Rect<T>::IsInside(const Rect<T2>& rOther) const$/;"	f	class:Rect	signature:(const Rect<T2>& rOther) const
IsNameChar	tinyxml2.h	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsNameStartChar	tinyxml2.h	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsUTF8Continuation	tinyxml2.h	/^    inline static bool IsUTF8Continuation( char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
IsWhiteSpace	tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
ItemSize	tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
ItemSize	tinyxml2.h	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
KERNELS_H	Kernels.h	29;"	d
Kernel	Kernels.h	/^class Kernel$/;"	c
Kernel::Eval	Kernels.h	/^	virtual double Eval(const Eigen::VectorXd& x) const = 0;$/;"	p	class:Kernel	access:public	signature:(const Eigen::VectorXd& x) const
Kernel::Eval	Kernels.h	/^	virtual double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const = 0;$/;"	p	class:Kernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
KernelName	Config.cpp	/^std::string Config::KernelName(KernelType k)$/;"	f	class:Config	signature:(KernelType k)
KernelName	Config.h	/^	static std::string KernelName(KernelType k);$/;"	p	class:Config	access:private	signature:(KernelType k)
KernelType	Config.h	/^	enum KernelType$/;"	g	class:Config	access:public
LARANK_H	LaRank.h	29;"	d
LF	tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LINE_FEED	tinyxml2.cpp	/^static const char LINE_FEED				= (char)0x0a;			\/\/ all line endings are normalized to LF$/;"	v	file:
LaRank	LaRank.cpp	/^LaRank::LaRank(const Config& conf, const Features& features, const Kernel& kernel) :$/;"	f	class:LaRank	signature:(const Config& conf, const Features& features, const Kernel& kernel)
LaRank	LaRank.h	/^	LaRank(const Config& conf, const Features& features, const Kernel& kernel);$/;"	p	class:LaRank	access:public	signature:(const Config& conf, const Features& features, const Kernel& kernel)
LaRank	LaRank.h	/^class LaRank$/;"	c
LaRank::AddSupportVector	LaRank.cpp	/^int LaRank::AddSupportVector(SupportPattern* x, int y, double g)$/;"	f	class:LaRank	signature:(SupportPattern* x, int y, double g)
LaRank::AddSupportVector	LaRank.h	/^	int AddSupportVector(SupportPattern* x, int y, double g);$/;"	p	class:LaRank	access:private	signature:(SupportPattern* x, int y, double g)
LaRank::BudgetMaintenance	LaRank.cpp	/^void LaRank::BudgetMaintenance()$/;"	f	class:LaRank	signature:()
LaRank::BudgetMaintenance	LaRank.h	/^	void BudgetMaintenance();$/;"	p	class:LaRank	access:private	signature:()
LaRank::BudgetMaintenanceRemove	LaRank.cpp	/^void LaRank::BudgetMaintenanceRemove()$/;"	f	class:LaRank	signature:()
LaRank::BudgetMaintenanceRemove	LaRank.h	/^	void BudgetMaintenanceRemove();$/;"	p	class:LaRank	access:private	signature:()
LaRank::ComputeDual	LaRank.cpp	/^double LaRank::ComputeDual() const$/;"	f	class:LaRank	signature:() const
LaRank::ComputeDual	LaRank.h	/^	double ComputeDual() const;$/;"	p	class:LaRank	access:private	signature:() const
LaRank::Debug	LaRank.cpp	/^void LaRank::Debug()$/;"	f	class:LaRank	signature:()
LaRank::Debug	LaRank.h	/^	virtual void Debug();$/;"	p	class:LaRank	access:public	signature:()
LaRank::Eval	LaRank.cpp	/^void LaRank::Eval(const MultiSample& sample, std::vector<double>& results)$/;"	f	class:LaRank	signature:(const MultiSample& sample, std::vector<double>& results)
LaRank::Eval	LaRank.h	/^	virtual void Eval(const MultiSample& x, std::vector<double>& results);$/;"	p	class:LaRank	access:public	signature:(const MultiSample& x, std::vector<double>& results)
LaRank::Evaluate	LaRank.cpp	/^double LaRank::Evaluate(const Eigen::VectorXd& x, const FloatRect& y) const$/;"	f	class:LaRank	signature:(const Eigen::VectorXd& x, const FloatRect& y) const
LaRank::Evaluate	LaRank.h	/^	double Evaluate(const Eigen::VectorXd& x, const FloatRect& y) const;$/;"	p	class:LaRank	access:private	signature:(const Eigen::VectorXd& x, const FloatRect& y) const
LaRank::LaRank	LaRank.cpp	/^LaRank::LaRank(const Config& conf, const Features& features, const Kernel& kernel) :$/;"	f	class:LaRank	signature:(const Config& conf, const Features& features, const Kernel& kernel)
LaRank::LaRank	LaRank.h	/^	LaRank(const Config& conf, const Features& features, const Kernel& kernel);$/;"	p	class:LaRank	access:public	signature:(const Config& conf, const Features& features, const Kernel& kernel)
LaRank::Loss	LaRank.h	/^	inline double Loss(const FloatRect& y1, const FloatRect& y2) const$/;"	f	class:LaRank	access:private	signature:(const FloatRect& y1, const FloatRect& y2) const
LaRank::MinGradient	LaRank.cpp	/^pair<int, double> LaRank::MinGradient(int ind)$/;"	f	class:LaRank	signature:(int ind)
LaRank::MinGradient	LaRank.h	/^	std::pair<int, double> MinGradient(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
LaRank::Optimize	LaRank.cpp	/^void LaRank::Optimize()$/;"	f	class:LaRank	signature:()
LaRank::Optimize	LaRank.h	/^	void Optimize();$/;"	p	class:LaRank	access:private	signature:()
LaRank::ProcessNew	LaRank.cpp	/^void LaRank::ProcessNew(int ind)$/;"	f	class:LaRank	signature:(int ind)
LaRank::ProcessNew	LaRank.h	/^	void ProcessNew(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
LaRank::ProcessOld	LaRank.cpp	/^void LaRank::ProcessOld()$/;"	f	class:LaRank	signature:()
LaRank::ProcessOld	LaRank.h	/^	void ProcessOld();$/;"	p	class:LaRank	access:private	signature:()
LaRank::RemoveSupportVector	LaRank.cpp	/^void LaRank::RemoveSupportVector(int ind)$/;"	f	class:LaRank	signature:(int ind)
LaRank::RemoveSupportVector	LaRank.h	/^	void RemoveSupportVector(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
LaRank::RemoveSupportVectors	LaRank.h	/^	void RemoveSupportVectors(int ind1, int ind2);$/;"	p	class:LaRank	access:private	signature:(int ind1, int ind2)
LaRank::Reprocess	LaRank.cpp	/^void LaRank::Reprocess()$/;"	f	class:LaRank	signature:()
LaRank::Reprocess	LaRank.h	/^	void Reprocess();$/;"	p	class:LaRank	access:private	signature:()
LaRank::SMOStep	LaRank.cpp	/^void LaRank::SMOStep(int ipos, int ineg)$/;"	f	class:LaRank	signature:(int ipos, int ineg)
LaRank::SMOStep	LaRank.h	/^	void SMOStep(int ipos, int ineg);$/;"	p	class:LaRank	access:private	signature:(int ipos, int ineg)
LaRank::SupportPattern	LaRank.h	/^	struct SupportPattern$/;"	s	class:LaRank	access:private
LaRank::SupportPattern::images	LaRank.h	/^		std::vector<cv::Mat> images;$/;"	m	struct:LaRank::SupportPattern	access:public
LaRank::SupportPattern::refCount	LaRank.h	/^		int refCount;$/;"	m	struct:LaRank::SupportPattern	access:public
LaRank::SupportPattern::x	LaRank.h	/^		std::vector<Eigen::VectorXd> x;$/;"	m	struct:LaRank::SupportPattern	access:public
LaRank::SupportPattern::y	LaRank.h	/^		int y;$/;"	m	struct:LaRank::SupportPattern	access:public
LaRank::SupportPattern::yv	LaRank.h	/^		std::vector<FloatRect> yv;$/;"	m	struct:LaRank::SupportPattern	access:public
LaRank::SupportVector	LaRank.h	/^	struct SupportVector$/;"	s	class:LaRank	access:private
LaRank::SupportVector::b	LaRank.h	/^		double b;$/;"	m	struct:LaRank::SupportVector	access:public
LaRank::SupportVector::g	LaRank.h	/^		double g;$/;"	m	struct:LaRank::SupportVector	access:public
LaRank::SupportVector::image	LaRank.h	/^		cv::Mat image;$/;"	m	struct:LaRank::SupportVector	access:public
LaRank::SupportVector::x	LaRank.h	/^		SupportPattern* x;$/;"	m	struct:LaRank::SupportVector	access:public
LaRank::SupportVector::y	LaRank.h	/^		int y;$/;"	m	struct:LaRank::SupportVector	access:public
LaRank::SwapSupportVectors	LaRank.cpp	/^void LaRank::SwapSupportVectors(int ind1, int ind2)$/;"	f	class:LaRank	signature:(int ind1, int ind2)
LaRank::SwapSupportVectors	LaRank.h	/^	void SwapSupportVectors(int ind1, int ind2);$/;"	p	class:LaRank	access:private	signature:(int ind1, int ind2)
LaRank::Update	LaRank.cpp	/^void LaRank::Update(const MultiSample& sample, int y)$/;"	f	class:LaRank	signature:(const MultiSample& sample, int y)
LaRank::Update	LaRank.h	/^	virtual void Update(const MultiSample& x, int y);$/;"	p	class:LaRank	access:public	signature:(const MultiSample& x, int y)
LaRank::UpdateDebugImage	LaRank.cpp	/^void LaRank::UpdateDebugImage()$/;"	f	class:LaRank	signature:()
LaRank::UpdateDebugImage	LaRank.h	/^	void UpdateDebugImage();$/;"	p	class:LaRank	access:private	signature:()
LaRank::m_C	LaRank.h	/^	double m_C;$/;"	m	class:LaRank	access:private
LaRank::m_K	LaRank.h	/^	Eigen::MatrixXd m_K;$/;"	m	class:LaRank	access:private
LaRank::m_config	LaRank.h	/^	const Config& m_config;$/;"	m	class:LaRank	access:private
LaRank::m_debugImage	LaRank.h	/^	cv::Mat m_debugImage;$/;"	m	class:LaRank	access:private
LaRank::m_features	LaRank.h	/^	const Features& m_features;$/;"	m	class:LaRank	access:private
LaRank::m_kernel	LaRank.h	/^	const Kernel& m_kernel;$/;"	m	class:LaRank	access:private
LaRank::m_sps	LaRank.h	/^	std::vector<SupportPattern*> m_sps;$/;"	m	class:LaRank	access:private
LaRank::m_svs	LaRank.h	/^	std::vector<SupportVector*> m_svs;$/;"	m	class:LaRank	access:private
LaRank::~LaRank	LaRank.cpp	/^LaRank::~LaRank()$/;"	f	class:LaRank	signature:()
LaRank::~LaRank	LaRank.h	/^	~LaRank();$/;"	p	class:LaRank	access:public	signature:()
LastChild	tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
LastChild	tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
LastChild	tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
LastChild	tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
LastChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
LastChildElement	tinyxml2.h	/^    XMLElement* LastChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
LastChildElement	tinyxml2.h	/^    XMLHandle LastChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
LastChildElement	tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
LastChildElement	tinyxml2.h	/^    const XMLElement* LastChildElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
LinearKernel	Kernels.h	/^class LinearKernel : public Kernel$/;"	c	inherits:Kernel
LinearKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:LinearKernel	access:public	signature:(const Eigen::VectorXd& x) const
LinearKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:LinearKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
LinkEndChild	tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
LoadFile	tinyxml2.h	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
LoadFile	tinyxml2.h	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
Loss	LaRank.h	/^	inline double Loss(const FloatRect& y1, const FloatRect& y2) const$/;"	f	class:LaRank	access:private	signature:(const FloatRect& y1, const FloatRect& y2) const
MAKE_VERSION	DJI_LIB/DJI_Pro_App.h	65;"	d
MEMORY_SIZE	DJI_LIB/DJI_Pro_Config.h	4;"	d
MMU_Setup	DJI_LIB/DJI_Pro_Rmu.cpp	/^void MMU_Setup(void)$/;"	f	signature:(void)
MMU_Setup	DJI_LIB/DJI_Pro_Rmu.h	/^extern void MMU_Setup(void);$/;"	p	signature:(void)
MMU_TABLE_NUM	DJI_LIB/DJI_Pro_Rmu.h	18;"	d
MMU_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^typedef struct MMU_Tab$/;"	s
MMU_Tab	DJI_LIB/DJI_Pro_Rmu.h	/^}MMU_Tab;$/;"	t	typeref:struct:MMU_Tab
MMU_Tab::mem_size	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int mem_size : 16;$/;"	m	struct:MMU_Tab	access:public
MMU_Tab::pmem	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned char *pmem;$/;"	m	struct:MMU_Tab	access:public
MMU_Tab::tab_index	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int tab_index : 8;$/;"	m	struct:MMU_Tab	access:public
MMU_Tab::usage_flag	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int usage_flag : 8;$/;"	m	struct:MMU_Tab	access:public
MSG_ENABLE_FLAG_LEN	DJI_LIB/DJI_Pro_App.h	75;"	d
MULTI_FEATURES_H	MultiFeatures.h	29;"	d
MY_ACTIVATION_SET	DJI_LIB/DJI_Pro_App.h	14;"	d
MY_BROADCAST_CMD_SET	DJI_LIB/DJI_Pro_App.h	16;"	d
MY_CTRL_CMD_SET	DJI_LIB/DJI_Pro_App.h	15;"	d
MY_DEV_ID	DJI_LIB/DJI_Pro_App.h	13;"	d
M_PI	Sampler.cpp	30;"	d	file:
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f	access:public
Mem	tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
Mem	tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
MemPool	tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
MemPool	tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	tinyxml2.h	/^    MemPoolT( const MemPoolT& ); \/\/ not supported$/;"	p	class:tinyxml2::MemPoolT	access:private	signature:( const MemPoolT& )
MemPoolT	tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
MemPoolT	tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
MinGradient	LaRank.cpp	/^pair<int, double> LaRank::MinGradient(int ind)$/;"	f	class:LaRank	signature:(int ind)
MinGradient	LaRank.h	/^	std::pair<int, double> MinGradient(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
MultiFeatures	MultiFeatures.cpp	/^MultiFeatures::MultiFeatures(const vector<Features*>& features) :$/;"	f	class:MultiFeatures	signature:(const vector<Features*>& features)
MultiFeatures	MultiFeatures.h	/^	MultiFeatures(const std::vector<Features*>& features);$/;"	p	class:MultiFeatures	access:public	signature:(const std::vector<Features*>& features)
MultiFeatures	MultiFeatures.h	/^class MultiFeatures : public Features$/;"	c	inherits:Features
MultiFeatures::MultiFeatures	MultiFeatures.cpp	/^MultiFeatures::MultiFeatures(const vector<Features*>& features) :$/;"	f	class:MultiFeatures	signature:(const vector<Features*>& features)
MultiFeatures::MultiFeatures	MultiFeatures.h	/^	MultiFeatures(const std::vector<Features*>& features);$/;"	p	class:MultiFeatures	access:public	signature:(const std::vector<Features*>& features)
MultiFeatures::UpdateFeatureVector	MultiFeatures.cpp	/^void MultiFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:MultiFeatures	signature:(const Sample& s)
MultiFeatures::UpdateFeatureVector	MultiFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:MultiFeatures	access:private	signature:(const Sample& s)
MultiFeatures::m_features	MultiFeatures.h	/^	std::vector<Features*> m_features;$/;"	m	class:MultiFeatures	access:private
MultiKernel	Kernels.h	/^	MultiKernel(const std::vector<Kernel*>& kernels, const std::vector<int>& featureCounts) :$/;"	f	class:MultiKernel	access:public	signature:(const std::vector<Kernel*>& kernels, const std::vector<int>& featureCounts)
MultiKernel	Kernels.h	/^class MultiKernel : public Kernel$/;"	c	inherits:Kernel
MultiKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x) const$/;"	f	class:MultiKernel	access:public	signature:(const Eigen::VectorXd& x) const
MultiKernel::Eval	Kernels.h	/^	inline double Eval(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const$/;"	f	class:MultiKernel	access:public	signature:(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2) const
MultiKernel::MultiKernel	Kernels.h	/^	MultiKernel(const std::vector<Kernel*>& kernels, const std::vector<int>& featureCounts) :$/;"	f	class:MultiKernel	access:public	signature:(const std::vector<Kernel*>& kernels, const std::vector<int>& featureCounts)
MultiKernel::m_counts	Kernels.h	/^	std::vector<int> m_counts;	$/;"	m	class:MultiKernel	access:private
MultiKernel::m_kernels	Kernels.h	/^	std::vector<Kernel*> m_kernels;$/;"	m	class:MultiKernel	access:private
MultiKernel::m_n	Kernels.h	/^	int m_n;$/;"	m	class:MultiKernel	access:private
MultiKernel::m_norm	Kernels.h	/^	double m_norm;$/;"	m	class:MultiKernel	access:private
MultiSample	Sample.h	/^	MultiSample(const ImageRep& image, const std::vector<FloatRect>& rects) :$/;"	f	class:MultiSample	access:public	signature:(const ImageRep& image, const std::vector<FloatRect>& rects)
MultiSample	Sample.h	/^class MultiSample$/;"	c
MultiSample::GetImage	Sample.h	/^	inline const ImageRep& GetImage() const { return m_image; }$/;"	f	class:MultiSample	access:public	signature:() const
MultiSample::GetRects	Sample.h	/^	inline const std::vector<FloatRect>& GetRects() const { return m_rects; }$/;"	f	class:MultiSample	access:public	signature:() const
MultiSample::GetSample	Sample.h	/^	inline Sample GetSample(int i) const { return Sample(m_image, m_rects[i]); }$/;"	f	class:MultiSample	access:public	signature:(int i) const
MultiSample::MultiSample	Sample.h	/^	MultiSample(const ImageRep& image, const std::vector<FloatRect>& rects) :$/;"	f	class:MultiSample	access:public	signature:(const ImageRep& image, const std::vector<FloatRect>& rects)
MultiSample::m_image	Sample.h	/^	const ImageRep& m_image;$/;"	m	class:MultiSample	access:private
MultiSample::m_rects	Sample.h	/^	std::vector<FloatRect> m_rects;$/;"	m	class:MultiSample	access:private
NEEDS_DELETE	tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon22
NEEDS_ENTITY_PROCESSING	tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon21
NEEDS_FLUSH	tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon22
NEEDS_NEWLINE_NORMALIZATION	tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon21
NEEDS_WHITESPACE_COLLAPSING	tinyxml2.h	/^        NEEDS_WHITESPACE_COLLAPSING     = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon21
NUM_ENTITIES	tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
Name	tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
Name	tinyxml2.h	/^    const char* Name() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
NewComment	tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewComment	tinyxml2.h	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
NewDeclaration	tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewDeclaration	tinyxml2.h	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
NewElement	tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
NewElement	tinyxml2.h	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
NewText	tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewText	tinyxml2.h	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
NewUnknown	tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewUnknown	tinyxml2.h	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
Next	tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
NextSibling	tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
NextSibling	tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
NextSibling	tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
NextSibling	tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
NextSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
NextSiblingElement	tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
NextSiblingElement	tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* name = 0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
NextSiblingElement	tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* name = 0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
NextSiblingElement	tinyxml2.h	/^    const XMLElement*	NextSiblingElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
NoChildren	tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
OPEN	tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon25
OpenElement	tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool compactMode )
OpenElement	tinyxml2.h	/^    void OpenElement( const char* name, bool compactMode=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool compactMode=false )
Optimize	LaRank.cpp	/^void LaRank::Optimize()$/;"	f	class:LaRank	signature:()
Optimize	LaRank.h	/^	void Optimize();$/;"	p	class:LaRank	access:private	signature:()
Overlap	Rect.h	/^	float Overlap(const Rect<T2>& rOther) const;$/;"	p	class:Rect	access:public	signature:(const Rect<T2>& rOther) const
Overlap	Rect.h	/^float Rect<T>::Overlap(const Rect<T2>& rOther) const$/;"	f	class:Rect	signature:(const Rect<T2>& rOther) const
PARSE_STD_MSG	DJI_LIB/DJI_Pro_App.h	270;"	d
POLL_TICK	DJI_LIB/DJI_Pro_Link.h	17;"	d
PRESERVE_WHITESPACE	tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
PRO_PURE_DATA_MAX_SIZE	DJI_LIB/DJI_Pro_Rmu.h	14;"	d
Parent	tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
Parent	tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
Parse	tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
Parse	tinyxml2.cpp	/^void XMLDocument::Parse()$/;"	f	class:tinyxml2::XMLDocument	signature:()
Parse	tinyxml2.h	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
Parse	tinyxml2.h	/^    void Parse();$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:()
ParseAttributes	tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
ParseAttributes	tinyxml2.h	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
ParseDeep	tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
ParseDeep	tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
ParseDeep	tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
ParseDeep	tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
ParseDeep	tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
ParseDeep	tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
ParseDeep	tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:protected	signature:( char* p, StrPair* endTag )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( char*, StrPair* endTag )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( char*, StrPair* endTag )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( char*, StrPair* endTag )
ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( char*, StrPair* endTag )
ParseDeep	tinyxml2.h	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( char*, StrPair* )
ParseName	tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
ParseName	tinyxml2.h	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
ParseText	tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
ParseText	tinyxml2.h	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
PeekTop	tinyxml2.h	/^    const T& PeekTop() const            {$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
PixelSamples	Sampler.cpp	/^vector<FloatRect> Sampler::PixelSamples(FloatRect centre, int radius, bool halfSample)$/;"	f	class:Sampler	signature:(FloatRect centre, int radius, bool halfSample)
PixelSamples	Sampler.h	/^	static std::vector<FloatRect> PixelSamples(FloatRect centre, int radius, bool halfSample = false);$/;"	p	class:Sampler	access:public	signature:(FloatRect centre, int radius, bool halfSample = false)
PollThread	DJI_LIB/DJI_Pro_Link.cpp	/^static void * PollThread(void * arg)$/;"	f	file:	signature:(void * arg)
Pop	tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
PopArr	tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PreviousSibling	tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
PreviousSibling	tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
PreviousSibling	tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
PreviousSibling	tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
PreviousSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
PreviousSiblingElement	tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* name = 0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
PreviousSiblingElement	tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* name = 0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
PreviousSiblingElement	tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* name = 0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
PreviousSiblingElement	tinyxml2.h	/^    const XMLElement*	PreviousSiblingElement( const char* name = 0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
Print	tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer ) const
Print	tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
Print	tinyxml2.h	/^    void Print( XMLPrinter* streamer=0 ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 ) const
Print	tinyxml2.h	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( const char* format, ... )
PrintError	tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
PrintError	tinyxml2.h	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
PrintSpace	tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
PrintSpace	tinyxml2.h	/^    virtual void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( int depth )
PrintString	tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
PrintString	tinyxml2.h	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
ProAckParameter	DJI_LIB/DJI_Pro_Link.h	/^typedef struct ProAckParameter$/;"	s
ProAckParameter	DJI_LIB/DJI_Pro_Link.h	/^}ProAckParameter;$/;"	t	typeref:struct:ProAckParameter
ProAckParameter::buf	DJI_LIB/DJI_Pro_Link.h	/^	unsigned char *buf;$/;"	m	struct:ProAckParameter	access:public
ProAckParameter::length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length;$/;"	m	struct:ProAckParameter	access:public
ProAckParameter::need_encrypt	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short need_encrypt : 8;$/;"	m	struct:ProAckParameter	access:public
ProAckParameter::seq_num	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short seq_num;$/;"	m	struct:ProAckParameter	access:public
ProAckParameter::session_id	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short session_id : 8;$/;"	m	struct:ProAckParameter	access:public
ProHeader	DJI_LIB/DJI_Pro_Link.h	/^typedef struct ProHeader$/;"	s
ProHeader	DJI_LIB/DJI_Pro_Link.h	/^}ProHeader;$/;"	t	typeref:struct:ProHeader
ProHeader::enc_type	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int enc_type : 3;$/;"	m	struct:ProHeader	access:public
ProHeader::head_crc	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int head_crc : 16;$/;"	m	struct:ProHeader	access:public
ProHeader::is_ack	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int is_ack : 1;$/;"	m	struct:ProHeader	access:public
ProHeader::length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length : 10;$/;"	m	struct:ProHeader	access:public
ProHeader::magic	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int magic[0];$/;"	m	struct:ProHeader	access:public
ProHeader::padding	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int padding : 5;$/;"	m	struct:ProHeader	access:public
ProHeader::reversed0	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int reversed0 : 2; 	\/\/ always 0$/;"	m	struct:ProHeader	access:public
ProHeader::reversed1	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int reversed1 : 24;$/;"	m	struct:ProHeader	access:public
ProHeader::sequence_number	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int sequence_number : 16;$/;"	m	struct:ProHeader	access:public
ProHeader::session_id	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int session_id : 5;$/;"	m	struct:ProHeader	access:public
ProHeader::sof	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int sof : 8; 			\/\/ 1byte$/;"	m	struct:ProHeader	access:public
ProHeader::version	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int version : 6; 		\/\/ 2byte$/;"	m	struct:ProHeader	access:public
ProSendParameter	DJI_LIB/DJI_Pro_Link.h	/^typedef struct ProSendParameter$/;"	s
ProSendParameter	DJI_LIB/DJI_Pro_Link.h	/^}ProSendParameter;$/;"	t	typeref:struct:ProSendParameter
ProSendParameter::ack_callback	DJI_LIB/DJI_Pro_Link.h	/^	ACK_Callback_Func ack_callback;$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::ack_timeout	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short ack_timeout;	\/\/unit is ms$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::buf	DJI_LIB/DJI_Pro_Link.h	/^	unsigned char *buf;$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length;$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::need_encrypt	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short need_encrypt : 1;$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::retry_time	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short retry_time : 13;$/;"	m	struct:ProSendParameter	access:public
ProSendParameter::session_mode	DJI_LIB/DJI_Pro_Link.h	/^    unsigned short session_mode : 2;$/;"	m	struct:ProSendParameter	access:public
Pro_Ack_Interface	DJI_LIB/DJI_Pro_Link.cpp	/^int Pro_Ack_Interface(ProAckParameter *parameter)$/;"	f	signature:(ProAckParameter *parameter)
Pro_Ack_Interface	DJI_LIB/DJI_Pro_Link.h	/^int Pro_Ack_Interface(ProAckParameter *parameter);$/;"	p	signature:(ProAckParameter *parameter)
Pro_App_Recv_Set_Hook	DJI_LIB/DJI_Pro_Link.cpp	/^void Pro_App_Recv_Set_Hook(Req_Callback_Func p_hook)$/;"	f	signature:(Req_Callback_Func p_hook)
Pro_App_Recv_Set_Hook	DJI_LIB/DJI_Pro_Link.h	/^void Pro_App_Recv_Set_Hook(Req_Callback_Func p_hook);$/;"	p	signature:(Req_Callback_Func p_hook)
Pro_Calc_Length	DJI_LIB/DJI_Pro_Link.cpp	/^static unsigned short Pro_Calc_Length(unsigned short size, unsigned short encrypt_flag)$/;"	f	file:	signature:(unsigned short size, unsigned short encrypt_flag)
Pro_Config_Comm_Encrypt_Key	DJI_LIB/DJI_Pro_Link.cpp	/^void Pro_Config_Comm_Encrypt_Key(const char *key)$/;"	f	signature:(const char *key)
Pro_Config_Comm_Encrypt_Key	DJI_LIB/DJI_Pro_Link.h	/^void Pro_Config_Comm_Encrypt_Key(const char *key);$/;"	p	signature:(const char *key)
Pro_Encode_ACK	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned char Pro_Encode_ACK[10];$/;"	v	file:
Pro_Encode_Data	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned char Pro_Encode_Data[1024];$/;"	v	file:
Pro_Hw_Close	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Close()$/;"	f	class:DJI_Pro_Hw	signature:()
Pro_Hw_Close	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Close();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
Pro_Hw_Create_Instance	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw * DJI_Pro_Hw::Pro_Hw_Create_Instance(void)$/;"	f	class:DJI_Pro_Hw	signature:(void)
Pro_Hw_Create_Instance	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *Pro_Hw_Create_Instance(void);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(void)
Pro_Hw_Flush	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Flush()$/;"	f	class:DJI_Pro_Hw	signature:()
Pro_Hw_Flush	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Flush();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
Pro_Hw_Get_Instance	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw * DJI_Pro_Hw::Pro_Hw_Get_Instance(void)$/;"	f	class:DJI_Pro_Hw	signature:(void)
Pro_Hw_Get_Instance	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *Pro_Hw_Get_Instance(void);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(void)
Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.cpp	/^int Pro_Hw_Recv(unsigned char *buf, int len)$/;"	f	signature:(unsigned char *buf, int len)
Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::Pro_Hw_Recv()$/;"	f	class:DJI_Pro_Hw	signature:()
Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.h	/^    void Pro_Hw_Recv();$/;"	p	class:DJI_Pro_Hw	access:private	signature:()
Pro_Hw_Recv	DJI_LIB/DJI_Pro_Hw.h	/^int Pro_Hw_Recv(unsigned char *buf, int len);$/;"	p	signature:(unsigned char *buf, int len)
Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.cpp	/^int DJI_Pro_Hw::Pro_Hw_Send(unsigned char *buf, int len)$/;"	f	class:DJI_Pro_Hw	signature:(unsigned char *buf, int len)
Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.cpp	/^int Pro_Hw_Send(unsigned char *buf, int len)$/;"	f	signature:(unsigned char *buf, int len)
Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.h	/^    int Pro_Hw_Send(unsigned char *buf, int len);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(unsigned char *buf, int len)
Pro_Hw_Send	DJI_LIB/DJI_Pro_Hw.h	/^int Pro_Hw_Send(unsigned char *buf, int len);$/;"	p	signature:(unsigned char *buf, int len)
Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.cpp	/^bool DJI_Pro_Hw::Pro_Hw_Setup(QString port_name,int baudrate)$/;"	f	class:DJI_Pro_Hw	signature:(QString port_name,int baudrate)
Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.cpp	/^int Pro_Hw_Setup(const char *device,int baudrate)$/;"	f	signature:(const char *device,int baudrate)
Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.h	/^    bool Pro_Hw_Setup(QString port_name,int baudrate);$/;"	p	class:DJI_Pro_Hw	access:public	signature:(QString port_name,int baudrate)
Pro_Hw_Setup	DJI_LIB/DJI_Pro_Hw.h	/^int Pro_Hw_Setup(const char *device,int baudrate);$/;"	p	signature:(const char *device,int baudrate)
Pro_Link_Recv_Hook	DJI_LIB/DJI_Pro_Link.cpp	/^void Pro_Link_Recv_Hook(ProHeader *header)$/;"	f	signature:(ProHeader *header)
Pro_Link_Recv_Hook	DJI_LIB/DJI_Pro_Link.h	/^void Pro_Link_Recv_Hook(ProHeader *header);$/;"	p	signature:(ProHeader *header)
Pro_Link_Setup	DJI_LIB/DJI_Pro_Link.cpp	/^void Pro_Link_Setup(void)$/;"	f	signature:(void)
Pro_Link_Setup	DJI_LIB/DJI_Pro_Link.h	/^void Pro_Link_Setup(void);$/;"	p	signature:(void)
Pro_Request_Interface	DJI_LIB/DJI_Pro_Link.cpp	/^void Pro_Request_Interface(ProHeader *header)$/;"	f	signature:(ProHeader *header)
Pro_Request_Interface	DJI_LIB/DJI_Pro_Link.h	/^void Pro_Request_Interface(ProHeader *header);$/;"	p	signature:(ProHeader *header)
Pro_Send_Interface	DJI_LIB/DJI_Pro_Link.cpp	/^int Pro_Send_Interface(ProSendParameter *parameter)$/;"	f	signature:(ProSendParameter *parameter)
Pro_Send_Interface	DJI_LIB/DJI_Pro_Link.h	/^int  Pro_Send_Interface(ProSendParameter *parameter);$/;"	p	signature:(ProSendParameter *parameter)
Pro_Send_Interface	DJI_LIB/DJI_Pro_Link.h	/^int Pro_Send_Interface(ProSendParameter *parameter);$/;"	p	signature:(ProSendParameter *parameter)
ProcessEntities	tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ProcessNew	LaRank.cpp	/^void LaRank::ProcessNew(int ind)$/;"	f	class:LaRank	signature:(int ind)
ProcessNew	LaRank.h	/^	void ProcessNew(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
ProcessOld	LaRank.cpp	/^void LaRank::ProcessOld()$/;"	f	class:LaRank	signature:()
ProcessOld	LaRank.h	/^	void ProcessOld();$/;"	p	class:LaRank	access:private	signature:()
Push	tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
PushArr	tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
PushComment	tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
PushComment	tinyxml2.h	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
PushDeclaration	tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushDeclaration	tinyxml2.h	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
PushHeader	tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
PushHeader	tinyxml2.h	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
PushText	tinyxml2.h	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
PushText	tinyxml2.h	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
PushText	tinyxml2.h	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
PushText	tinyxml2.h	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
PushText	tinyxml2.h	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
PushText	tinyxml2.h	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
PushUnknown	tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushUnknown	tinyxml2.h	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryBoolAttribute	tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryBoolText	tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
QueryBoolText	tinyxml2.h	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
QueryBoolValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
QueryBoolValue	tinyxml2.h	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
QueryDoubleAttribute	tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryDoubleText	tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
QueryDoubleText	tinyxml2.h	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
QueryDoubleValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
QueryDoubleValue	tinyxml2.h	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
QueryFloatAttribute	tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryFloatText	tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
QueryFloatText	tinyxml2.h	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
QueryFloatValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
QueryFloatValue	tinyxml2.h	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
QueryIntAttribute	tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryIntText	tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
QueryIntText	tinyxml2.h	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
QueryIntValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
QueryIntValue	tinyxml2.h	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
QueryUnsignedAttribute	tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryUnsignedText	tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
QueryUnsignedText	tinyxml2.h	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
QueryUnsignedValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
QueryUnsignedValue	tinyxml2.h	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
RAW_FEATURES_H	RawFeatures.h	29;"	d
RECT_H	Rect.h	29;"	d
REQ_REFUSE	DJI_LIB/DJI_Pro_App.h	230;"	d
REQ_TIME_OUT	DJI_LIB/DJI_Pro_App.h	229;"	d
RadialSamples	Sampler.cpp	/^vector<FloatRect> Sampler::RadialSamples(FloatRect centre, int radius, int nr, int nt)$/;"	f	class:Sampler	signature:(FloatRect centre, int radius, int nr, int nt)
RadialSamples	Sampler.h	/^	static std::vector<FloatRect> RadialSamples(FloatRect centre, int radius, int nr, int nt);$/;"	p	class:Sampler	access:public	signature:(FloatRect centre, int radius, int nr, int nt)
RawFeatures	RawFeatures.cpp	/^RawFeatures::RawFeatures(const Config& conf) :$/;"	f	class:RawFeatures	signature:(const Config& conf)
RawFeatures	RawFeatures.h	/^	RawFeatures(const Config& conf);$/;"	p	class:RawFeatures	access:public	signature:(const Config& conf)
RawFeatures	RawFeatures.h	/^class RawFeatures : public Features$/;"	c	inherits:Features
RawFeatures::RawFeatures	RawFeatures.cpp	/^RawFeatures::RawFeatures(const Config& conf) :$/;"	f	class:RawFeatures	signature:(const Config& conf)
RawFeatures::RawFeatures	RawFeatures.h	/^	RawFeatures(const Config& conf);$/;"	p	class:RawFeatures	access:public	signature:(const Config& conf)
RawFeatures::UpdateFeatureVector	RawFeatures.cpp	/^void RawFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:RawFeatures	signature:(const Sample& s)
RawFeatures::UpdateFeatureVector	RawFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:RawFeatures	access:private	signature:(const Sample& s)
RawFeatures::m_patchImage	RawFeatures.h	/^	cv::Mat m_patchImage;$/;"	m	class:RawFeatures	access:private
ReadBOM	tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
ReadBOM	tinyxml2.h	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
Rect	Rect.h	/^	Rect() :$/;"	f	class:Rect	access:public	signature:()
Rect	Rect.h	/^	Rect(T xMin, T yMin, T width, T height) :$/;"	f	class:Rect	access:public	signature:(T xMin, T yMin, T width, T height)
Rect	Rect.h	/^	Rect(const Rect<T2>& rOther) :$/;"	f	class:Rect	access:public	signature:(const Rect<T2>& rOther)
Rect	Rect.h	/^class Rect$/;"	c
Rect::Area	Rect.h	/^	inline T Area() const { return m_width * m_height; }$/;"	f	class:Rect	access:public	signature:() const
Rect::Height	Rect.h	/^	inline T Height() const { return m_height; }$/;"	f	class:Rect	access:public	signature:() const
Rect::IsInside	Rect.h	/^	bool IsInside(const Rect<T2>& rOther) const;$/;"	p	class:Rect	access:public	signature:(const Rect<T2>& rOther) const
Rect::IsInside	Rect.h	/^bool Rect<T>::IsInside(const Rect<T2>& rOther) const$/;"	f	class:Rect	signature:(const Rect<T2>& rOther) const
Rect::Overlap	Rect.h	/^	float Overlap(const Rect<T2>& rOther) const;$/;"	p	class:Rect	access:public	signature:(const Rect<T2>& rOther) const
Rect::Overlap	Rect.h	/^float Rect<T>::Overlap(const Rect<T2>& rOther) const$/;"	f	class:Rect	signature:(const Rect<T2>& rOther) const
Rect::Rect	Rect.h	/^	Rect() :$/;"	f	class:Rect	access:public	signature:()
Rect::Rect	Rect.h	/^	Rect(T xMin, T yMin, T width, T height) :$/;"	f	class:Rect	access:public	signature:(T xMin, T yMin, T width, T height)
Rect::Rect	Rect.h	/^	Rect(const Rect<T2>& rOther) :$/;"	f	class:Rect	access:public	signature:(const Rect<T2>& rOther)
Rect::Set	Rect.h	/^	inline void Set(T xMin, T yMin, T width, T height)$/;"	f	class:Rect	access:public	signature:(T xMin, T yMin, T width, T height)
Rect::SetHeight	Rect.h	/^	inline void SetHeight(T val) { m_height = val; }$/;"	f	class:Rect	access:public	signature:(T val)
Rect::SetWidth	Rect.h	/^	inline void SetWidth(T val) { m_width = val; }$/;"	f	class:Rect	access:public	signature:(T val)
Rect::SetXMin	Rect.h	/^	inline void SetXMin(T val) { m_xMin = val; }$/;"	f	class:Rect	access:public	signature:(T val)
Rect::SetYMin	Rect.h	/^	inline void SetYMin(T val) { m_yMin = val; }$/;"	f	class:Rect	access:public	signature:(T val)
Rect::Translate	Rect.h	/^	inline void Translate(T x, T y) { m_xMin += x; m_yMin += y; }$/;"	f	class:Rect	access:public	signature:(T x, T y)
Rect::Width	Rect.h	/^	inline T Width() const { return m_width; }$/;"	f	class:Rect	access:public	signature:() const
Rect::XCentre	Rect.h	/^	inline float XCentre() const { return (float)m_xMin + (float)m_width \/ 2; }$/;"	f	class:Rect	access:public	signature:() const
Rect::XMax	Rect.h	/^	inline T XMax() const { return m_xMin + m_width; }$/;"	f	class:Rect	access:public	signature:() const
Rect::XMin	Rect.h	/^	inline T XMin() const { return m_xMin; }$/;"	f	class:Rect	access:public	signature:() const
Rect::YCentre	Rect.h	/^	inline float YCentre() const { return (float)m_yMin + (float)m_height \/ 2; }$/;"	f	class:Rect	access:public	signature:() const
Rect::YMax	Rect.h	/^	inline T YMax() const { return m_yMin + m_height; }$/;"	f	class:Rect	access:public	signature:() const
Rect::YMin	Rect.h	/^	inline T YMin() const { return m_yMin; }$/;"	f	class:Rect	access:public	signature:() const
Rect::m_height	Rect.h	/^	T m_height;$/;"	m	class:Rect	access:private
Rect::m_width	Rect.h	/^	T m_width;$/;"	m	class:Rect	access:private
Rect::m_xMin	Rect.h	/^	T m_xMin;$/;"	m	class:Rect	access:private
Rect::m_yMin	Rect.h	/^	T m_yMin;$/;"	m	class:Rect	access:private
Rect::operator <<	Rect.h	/^	friend std::ostream& operator <<(std::ostream &rOS, const Rect<T2>& rRect);$/;"	p	class:Rect	access:friend	signature:(std::ostream &rOS, const Rect<T2>& rRect)
RemoveSupportVector	LaRank.cpp	/^void LaRank::RemoveSupportVector(int ind)$/;"	f	class:LaRank	signature:(int ind)
RemoveSupportVector	LaRank.h	/^	void RemoveSupportVector(int ind);$/;"	p	class:LaRank	access:private	signature:(int ind)
RemoveSupportVectors	LaRank.h	/^	void RemoveSupportVectors(int ind1, int ind2);$/;"	p	class:LaRank	access:private	signature:(int ind1, int ind2)
Reprocess	LaRank.cpp	/^void LaRank::Reprocess()$/;"	f	class:LaRank	signature:()
Reprocess	LaRank.h	/^	void Reprocess();$/;"	p	class:LaRank	access:private	signature:()
Req_Callback_Func	DJI_LIB/DJI_Pro_Link.h	/^typedef void (*Req_Callback_Func)(ProHeader *pHeader);$/;"	t
Request_ACK_Session	DJI_LIB/DJI_Pro_Rmu.cpp	/^ACK_Session_Tab * Request_ACK_Session(unsigned short session_id,unsigned short size)$/;"	f	signature:(unsigned short session_id,unsigned short size)
Request_ACK_Session	DJI_LIB/DJI_Pro_Rmu.h	/^extern ACK_Session_Tab * Request_ACK_Session(unsigned short session_id,unsigned short size);$/;"	p	signature:(unsigned short session_id,unsigned short size)
Request_CMD_Session	DJI_LIB/DJI_Pro_Rmu.cpp	/^CMD_Session_Tab * Request_CMD_Session(unsigned short session_id,unsigned short size)$/;"	f	signature:(unsigned short session_id,unsigned short size)
Request_CMD_Session	DJI_LIB/DJI_Pro_Rmu.h	/^extern CMD_Session_Tab * Request_CMD_Session(unsigned short session_id,unsigned short size);$/;"	p	signature:(unsigned short session_id,unsigned short size)
Request_Memory	DJI_LIB/DJI_Pro_Rmu.cpp	/^MMU_Tab * Request_Memory(unsigned short size)$/;"	f	signature:(unsigned short size)
Request_Memory	DJI_LIB/DJI_Pro_Rmu.h	/^extern MMU_Tab * Request_Memory(unsigned short size);$/;"	p	signature:(unsigned short size)
Reset	Tracker.cpp	/^void Tracker::Reset()$/;"	f	class:Tracker	signature:()
Reset	Tracker.h	/^	void Reset();$/;"	p	class:Tracker	access:public	signature:()
Reset	tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
Reset	tinyxml2.h	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
RootElement	tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
RootElement	tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
SAMPLER_H	Sampler.h	29;"	d
SAMPLE_H	Sample.h	29;"	d
SDKFilter	DJI_LIB/DJI_Pro_Codec.h	/^} SDKFilter;$/;"	t	typeref:struct:__anon19
SDKHeader	DJI_LIB/DJI_Pro_Codec.h	/^} SDKHeader;$/;"	t	typeref:struct:__anon18
SDK_ACTIVATE_DATA_ENC_ERROR	DJI_LIB/DJI_Pro_App.h	262;"	d
SDK_ACTIVATE_DIJ_APP_NO_INTERNET	DJI_LIB/DJI_Pro_App.h	265;"	d
SDK_ACTIVATE_DJI_APP_NOT_CONNECT	DJI_LIB/DJI_Pro_App.h	264;"	d
SDK_ACTIVATE_LEVEL_ERROR	DJI_LIB/DJI_Pro_App.h	267;"	d
SDK_ACTIVATE_NEW_DEVICE	DJI_LIB/DJI_Pro_App.h	263;"	d
SDK_ACTIVATE_PARAM_ERROR	DJI_LIB/DJI_Pro_App.h	261;"	d
SDK_ACTIVATE_SDK_VERSION_ERROR	DJI_LIB/DJI_Pro_App.h	268;"	d
SDK_ACTIVATE_SERVER_REFUSED	DJI_LIB/DJI_Pro_App.h	266;"	d
SDK_ACTIVATE_SUCCESS	DJI_LIB/DJI_Pro_App.h	260;"	d
SDK_ERR_COMMAND_NOT_SUPPORTED	DJI_LIB/DJI_Pro_App.h	255;"	d
SDK_ERR_NO_AUTHORIZED	DJI_LIB/DJI_Pro_App.h	256;"	d
SDK_ERR_NO_RESPONSE	DJI_LIB/DJI_Pro_App.h	258;"	d
SDK_ERR_NO_RIGHTS	DJI_LIB/DJI_Pro_App.h	257;"	d
SDK_ERR_SUCCESS	DJI_LIB/DJI_Pro_App.h	254;"	d
SDK_VERSION	DJI_LIB/DJI_Pro_App.h	66;"	d
SESSION_TABLE_NUM	DJI_LIB/DJI_Pro_Rmu.h	32;"	d
SET_CMD_SIZE	DJI_LIB/DJI_Pro_App.h	224;"	d
SINGLE_QUOTE	tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SMOStep	LaRank.cpp	/^void LaRank::SMOStep(int ipos, int ineg)$/;"	f	class:LaRank	signature:(int ipos, int ineg)
SMOStep	LaRank.h	/^	void SMOStep(int ipos, int ineg);$/;"	p	class:LaRank	access:private	signature:(int ipos, int ineg)
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
STATIC_MEMORY_SIZE	DJI_LIB/DJI_Pro_Rmu.h	17;"	d
STATUS_CMD_EXECUTING	DJI_LIB/DJI_Pro_App.h	232;"	d
STATUS_CMD_EXE_FAIL	DJI_LIB/DJI_Pro_App.h	233;"	d
STATUS_CMD_EXE_SUCCESS	DJI_LIB/DJI_Pro_App.h	234;"	d
Sample	Sample.h	/^	Sample(const ImageRep& image, const FloatRect& roi) :$/;"	f	class:Sample	access:public	signature:(const ImageRep& image, const FloatRect& roi)
Sample	Sample.h	/^class Sample$/;"	c
Sample::GetImage	Sample.h	/^	inline const ImageRep& GetImage() const { return m_image; }$/;"	f	class:Sample	access:public	signature:() const
Sample::GetROI	Sample.h	/^	inline const FloatRect& GetROI() const { return m_roi; }$/;"	f	class:Sample	access:public	signature:() const
Sample::Sample	Sample.h	/^	Sample(const ImageRep& image, const FloatRect& roi) :$/;"	f	class:Sample	access:public	signature:(const ImageRep& image, const FloatRect& roi)
Sample::m_image	Sample.h	/^	const ImageRep& m_image;$/;"	m	class:Sample	access:private
Sample::m_roi	Sample.h	/^	FloatRect m_roi;$/;"	m	class:Sample	access:private
Sampler	Sampler.h	/^class Sampler$/;"	c
Sampler::PixelSamples	Sampler.cpp	/^vector<FloatRect> Sampler::PixelSamples(FloatRect centre, int radius, bool halfSample)$/;"	f	class:Sampler	signature:(FloatRect centre, int radius, bool halfSample)
Sampler::PixelSamples	Sampler.h	/^	static std::vector<FloatRect> PixelSamples(FloatRect centre, int radius, bool halfSample = false);$/;"	p	class:Sampler	access:public	signature:(FloatRect centre, int radius, bool halfSample = false)
Sampler::RadialSamples	Sampler.cpp	/^vector<FloatRect> Sampler::RadialSamples(FloatRect centre, int radius, int nr, int nt)$/;"	f	class:Sampler	signature:(FloatRect centre, int radius, int nr, int nt)
Sampler::RadialSamples	Sampler.h	/^	static std::vector<FloatRect> RadialSamples(FloatRect centre, int radius, int nr, int nt);$/;"	p	class:Sampler	access:public	signature:(FloatRect centre, int radius, int nr, int nt)
SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
SaveFile	tinyxml2.h	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
SaveFile	tinyxml2.h	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
Save_Status_Ctrl_Return_Code	DJI_LIB/DJI_Pro_App.cpp	/^static void Save_Status_Ctrl_Return_Code(unsigned short ret_code)$/;"	f	file:	signature:(unsigned short ret_code)
SealElementIfJustOpened	tinyxml2.cpp	/^void XMLPrinter::SealElementIfJustOpened()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
SealElementIfJustOpened	tinyxml2.h	/^    void SealElementIfJustOpened();$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:()
Send_Poll	DJI_LIB/DJI_Pro_Link.cpp	/^static void Send_Poll(void)$/;"	f	file:	signature:(void)
Send_Pro_Data	DJI_LIB/DJI_Pro_Link.cpp	/^static void Send_Pro_Data(unsigned char *buf)$/;"	f	file:	signature:(unsigned char *buf)
SerialClose	DJI_LIB/DJI_Pro_Hw.cpp	/^int SerialClose()$/;"	f	signature:()
SerialConfig	DJI_LIB/DJI_Pro_Hw.cpp	/^int SerialConfig(int baudrate,char data_bits,char parity_bits,char stop_bits)$/;"	f	signature:(int baudrate,char data_bits,char parity_bits,char stop_bits)
SerialFlush	DJI_LIB/DJI_Pro_Hw.cpp	/^int SerialFlush()$/;"	f	signature:()
SerialOpen	DJI_LIB/DJI_Pro_Hw.cpp	/^int SerialOpen(const char *port_str)$/;"	f	signature:(const char *port_str)
SerialRead	DJI_LIB/DJI_Pro_Hw.cpp	/^static int SerialRead(unsigned char *buf,int len)$/;"	f	file:	signature:(unsigned char *buf,int len)
SerialRecvThread	DJI_LIB/DJI_Pro_Hw.cpp	/^static void * SerialRecvThread(void * arg)$/;"	f	file:	signature:(void * arg)
SerialStart	DJI_LIB/DJI_Pro_Hw.cpp	/^static int SerialStart(const char *dev_name,int baud_rate)$/;"	f	file:	signature:(const char *dev_name,int baud_rate)
SerialStartThread	DJI_LIB/DJI_Pro_Hw.cpp	/^int SerialStartThread(void)$/;"	f	signature:(void)
SerialWrite	DJI_LIB/DJI_Pro_Hw.cpp	/^static int SerialWrite(unsigned char *buf,int len)$/;"	f	file:	signature:(unsigned char *buf,int len)
Session_Setup	DJI_LIB/DJI_Pro_Rmu.cpp	/^void Session_Setup(void)$/;"	f	signature:(void)
Session_Setup	DJI_LIB/DJI_Pro_Rmu.h	/^extern void Session_Setup(void);$/;"	p	signature:(void)
Set	Rect.h	/^	inline void Set(T xMin, T yMin, T width, T height)$/;"	f	class:Rect	access:public	signature:(T xMin, T yMin, T width, T height)
Set	tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
SetAttribute	tinyxml2.h	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
SetAttribute	tinyxml2.h	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
SetBOM	tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
SetCData	tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
SetCount	Features.cpp	/^void Features::SetCount(int c)$/;"	f	class:Features	signature:(int c)
SetCount	Features.h	/^	void SetCount(int c);$/;"	p	class:Features	access:protected	signature:(int c)
SetDefaults	Config.cpp	/^void Config::SetDefaults()$/;"	f	class:Config	signature:()
SetDefaults	Config.h	/^	void SetDefaults();$/;"	p	class:Config	access:private	signature:()
SetError	tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
SetError	tinyxml2.h	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
SetHeight	Rect.h	/^	inline void SetHeight(T val) { m_height = val; }$/;"	f	class:Rect	access:public	signature:(T val)
SetInternedStr	tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
SetName	tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
SetName	tinyxml2.h	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
SetName	tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
SetStr	tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
SetStr	tinyxml2.h	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
SetText	tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* inText )
SetText	tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement	signature:( bool v )
SetText	tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement	signature:( double v )
SetText	tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement	signature:( float v )
SetText	tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement	signature:( int v )
SetText	tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement	signature:( unsigned v )
SetText	tinyxml2.h	/^	void SetText( const char* inText );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* inText )
SetText	tinyxml2.h	/^    void SetText( bool value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool value )
SetText	tinyxml2.h	/^    void SetText( double value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double value )
SetText	tinyxml2.h	/^    void SetText( float value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float value )
SetText	tinyxml2.h	/^    void SetText( int value );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int value )
SetText	tinyxml2.h	/^    void SetText( unsigned value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned value )
SetTracked	tinyxml2.h	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
SetTracked	tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
SetValue	tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
SetValue	tinyxml2.h	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
SetWidth	Rect.h	/^	inline void SetWidth(T val) { m_width = val; }$/;"	f	class:Rect	access:public	signature:(T val)
SetXMin	Rect.h	/^	inline void SetXMin(T val) { m_xMin = val; }$/;"	f	class:Rect	access:public	signature:(T val)
SetYMin	Rect.h	/^	inline void SetYMin(T val) { m_yMin = val; }$/;"	f	class:Rect	access:public	signature:(T val)
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
ShallowClone	tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
ShallowEqual	tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
Size	tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
SkipWhiteSpace	tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
SkipWhiteSpace	tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
Start_PollThread	DJI_LIB/DJI_Pro_Link.cpp	/^static int Start_PollThread(void)$/;"	f	file:	signature:(void)
Static_Memory	DJI_LIB/DJI_Pro_Rmu.cpp	/^static unsigned char Static_Memory[STATIC_MEMORY_SIZE];$/;"	v	file:
Status_Ctrl_Thread_Func	DJI_LIB/DJI_Pro_App.cpp	/^static void * Status_Ctrl_Thread_Func(void * arg)$/;"	f	file:	signature:(void * arg)
StrPair	tinyxml2.h	/^    StrPair( const StrPair& other );	\/\/ not supported$/;"	p	class:tinyxml2::StrPair	access:private	signature:( const StrPair& other )
StrPair	tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
StrPair	tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
StringEqual	tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
Sum	ImageRep.cpp	/^int ImageRep::Sum(const IntRect& rRect, int channel) const$/;"	f	class:ImageRep	signature:(const IntRect& rRect, int channel) const
Sum	ImageRep.h	/^	int Sum(const IntRect& rRect, int channel = 0) const;$/;"	p	class:ImageRep	access:public	signature:(const IntRect& rRect, int channel = 0) const
SupportPattern	LaRank.h	/^	struct SupportPattern$/;"	s	class:LaRank	access:private
SupportVector	LaRank.h	/^	struct SupportVector$/;"	s	class:LaRank	access:private
SwapSupportVectors	LaRank.cpp	/^void LaRank::SwapSupportVectors(int ind1, int ind2)$/;"	f	class:LaRank	signature:(int ind1, int ind2)
SwapSupportVectors	LaRank.h	/^	void SwapSupportVectors(int ind1, int ind2);$/;"	p	class:LaRank	access:private	signature:(int ind1, int ind2)
TEXT_ELEMENT	tinyxml2.h	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
TEXT_ELEMENT_LEAVE_ENTITIES	tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
TINYXML2_INCLUDED	tinyxml2.h	25;"	d
TINYXML2_LIB	tinyxml2.h	65;"	d
TINYXML2_LIB	tinyxml2.h	67;"	d
TINYXML2_LIB	tinyxml2.h	69;"	d
TINYXML2_LIB	tinyxml2.h	72;"	d
TIXML2_MAJOR_VERSION	tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 3;$/;"	v
TIXML2_MINOR_VERSION	tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 0;$/;"	v
TIXMLASSERT	tinyxml2.h	79;"	d
TIXMLASSERT	tinyxml2.h	82;"	d
TIXMLASSERT	tinyxml2.h	85;"	d
TIXMLASSERT	tinyxml2.h	88;"	d
TIXML_SNPRINTF	tinyxml2.cpp	/^	static inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f	file:	signature:( char* buffer, size_t size, const char* format, ... )
TIXML_SNPRINTF	tinyxml2.cpp	63;"	d	file:
TIXML_SNPRINTF	tinyxml2.cpp	92;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	100;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	60;"	d	file:
TIXML_SSCANF	tinyxml2.cpp	65;"	d	file:
TIXML_UTF_LEAD_0	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TIXML_VSCPRINTF	tinyxml2.cpp	/^		static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:	signature:( const char* format, va_list va )
TIXML_VSCPRINTF	tinyxml2.cpp	/^	static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:	signature:( const char* format, va_list va )
TIXML_VSCPRINTF	tinyxml2.cpp	59;"	d	file:
TIXML_VSCPRINTF	tinyxml2.cpp	68;"	d	file:
TIXML_VSNPRINTF	tinyxml2.cpp	/^	static inline int TIXML_VSNPRINTF( char* buffer, size_t size, const char* format, va_list va )$/;"	f	file:	signature:( char* buffer, size_t size, const char* format, va_list va )
TIXML_VSNPRINTF	tinyxml2.cpp	64;"	d	file:
TIXML_VSNPRINTF	tinyxml2.cpp	93;"	d	file:
TRACKER_H	Tracker.h	29;"	d
Test_ACK_Callback	DJI_LIB/DJI_Pro_Link.cpp	/^void Test_ACK_Callback(ProHeader *header)$/;"	f	signature:(ProHeader *header)
Test_Pro_Link	DJI_LIB/DJI_Pro_Link.cpp	/^void Test_Pro_Link(void)$/;"	f	signature:(void)
Test_Pro_Link	DJI_LIB/DJI_Pro_Link.h	/^void Test_Pro_Link(void);$/;"	p	signature:(void)
ToBool	tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
ToBool	tinyxml2.h	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
ToComment	tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToComment	tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
ToComment	tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToComment	tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
ToDeclaration	tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToDeclaration	tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
ToDocument	tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDocument	tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
ToDocument	tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDocument	tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ToDouble	tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
ToDouble	tinyxml2.h	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
ToElement	tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToElement	tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToElement	tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToElement	tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
ToElement	tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToElement	tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
ToFloat	tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
ToFloat	tinyxml2.h	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
ToInt	tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
ToInt	tinyxml2.h	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
ToNode	tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToNode	tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
ToStr	tinyxml2.h	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
ToStr	tinyxml2.h	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
ToStr	tinyxml2.h	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
ToStr	tinyxml2.h	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
ToStr	tinyxml2.h	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
ToText	tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToText	tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToText	tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToText	tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
ToText	tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToText	tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
ToUnknown	tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToUnknown	tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
ToUnsigned	tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
ToUnsigned	tinyxml2.h	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
Trace	tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
Track	Tracker.cpp	/^void Tracker::Track(const cv::Mat& frame)$/;"	f	class:Tracker	signature:(const cv::Mat& frame)
Track	Tracker.h	/^	void Track(const cv::Mat& frame);$/;"	p	class:Tracker	access:public	signature:(const cv::Mat& frame)
Tracker	Tracker.cpp	/^Tracker::Tracker(const Config& conf) :$/;"	f	class:Tracker	signature:(const Config& conf)
Tracker	Tracker.h	/^	Tracker(const Config& conf);$/;"	p	class:Tracker	access:public	signature:(const Config& conf)
Tracker	Tracker.h	/^class Tracker$/;"	c
Tracker::Debug	Tracker.cpp	/^void Tracker::Debug()$/;"	f	class:Tracker	signature:()
Tracker::Debug	Tracker.h	/^	void Debug();$/;"	p	class:Tracker	access:public	signature:()
Tracker::GetBB	Tracker.h	/^	inline const FloatRect& GetBB() const { return m_bb; }$/;"	f	class:Tracker	access:public	signature:() const
Tracker::Initialise	Tracker.cpp	/^void Tracker::Initialise(const cv::Mat& frame, FloatRect bb)$/;"	f	class:Tracker	signature:(const cv::Mat& frame, FloatRect bb)
Tracker::Initialise	Tracker.h	/^	void Initialise(const cv::Mat& frame, FloatRect bb);$/;"	p	class:Tracker	access:public	signature:(const cv::Mat& frame, FloatRect bb)
Tracker::IsInitialised	Tracker.h	/^	inline bool IsInitialised() const { return m_initialised; }$/;"	f	class:Tracker	access:public	signature:() const
Tracker::Reset	Tracker.cpp	/^void Tracker::Reset()$/;"	f	class:Tracker	signature:()
Tracker::Reset	Tracker.h	/^	void Reset();$/;"	p	class:Tracker	access:public	signature:()
Tracker::Track	Tracker.cpp	/^void Tracker::Track(const cv::Mat& frame)$/;"	f	class:Tracker	signature:(const cv::Mat& frame)
Tracker::Track	Tracker.h	/^	void Track(const cv::Mat& frame);$/;"	p	class:Tracker	access:public	signature:(const cv::Mat& frame)
Tracker::Tracker	Tracker.cpp	/^Tracker::Tracker(const Config& conf) :$/;"	f	class:Tracker	signature:(const Config& conf)
Tracker::Tracker	Tracker.h	/^	Tracker(const Config& conf);$/;"	p	class:Tracker	access:public	signature:(const Config& conf)
Tracker::UpdateDebugImage	Tracker.cpp	/^void Tracker::UpdateDebugImage(const vector<FloatRect>& samples, const FloatRect& centre, const vector<double>& scores)$/;"	f	class:Tracker	signature:(const vector<FloatRect>& samples, const FloatRect& centre, const vector<double>& scores)
Tracker::UpdateDebugImage	Tracker.h	/^	void UpdateDebugImage(const std::vector<FloatRect>& samples, const FloatRect& centre, const std::vector<double>& scores);$/;"	p	class:Tracker	access:private	signature:(const std::vector<FloatRect>& samples, const FloatRect& centre, const std::vector<double>& scores)
Tracker::UpdateLearner	Tracker.cpp	/^void Tracker::UpdateLearner(const ImageRep& image)$/;"	f	class:Tracker	signature:(const ImageRep& image)
Tracker::UpdateLearner	Tracker.h	/^	void UpdateLearner(const ImageRep& image);$/;"	p	class:Tracker	access:private	signature:(const ImageRep& image)
Tracker::m_bb	Tracker.h	/^	FloatRect m_bb;$/;"	m	class:Tracker	access:private
Tracker::m_config	Tracker.h	/^	const Config& m_config;$/;"	m	class:Tracker	access:private
Tracker::m_debugImage	Tracker.h	/^	cv::Mat m_debugImage;$/;"	m	class:Tracker	access:private
Tracker::m_features	Tracker.h	/^	std::vector<Features*> m_features;$/;"	m	class:Tracker	access:private
Tracker::m_initialised	Tracker.h	/^	bool m_initialised;$/;"	m	class:Tracker	access:private
Tracker::m_kernels	Tracker.h	/^	std::vector<Kernel*> m_kernels;$/;"	m	class:Tracker	access:private
Tracker::m_needsIntegralHist	Tracker.h	/^	bool m_needsIntegralHist;$/;"	m	class:Tracker	access:private
Tracker::m_needsIntegralImage	Tracker.h	/^	bool m_needsIntegralImage;$/;"	m	class:Tracker	access:private
Tracker::m_pLearner	Tracker.h	/^	LaRank* m_pLearner;$/;"	m	class:Tracker	access:private
Tracker::~Tracker	Tracker.cpp	/^Tracker::~Tracker()$/;"	f	class:Tracker	signature:()
Tracker::~Tracker	Tracker.h	/^	~Tracker();$/;"	p	class:Tracker	access:public	signature:()
TransferTo	tinyxml2.cpp	/^void StrPair::TransferTo( StrPair* other )$/;"	f	class:tinyxml2::StrPair	signature:( StrPair* other )
TransferTo	tinyxml2.h	/^    void TransferTo( StrPair* other );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( StrPair* other )
Translate	Rect.h	/^	inline void Translate(T x, T y) { m_xMin += x; m_yMin += y; }$/;"	f	class:Rect	access:public	signature:(T x, T y)
Transparent_Transmission_Func	DJI_LIB/DJI_Pro_App.h	/^typedef void (*Transparent_Transmission_Func)(unsigned char *buf,unsigned char len);$/;"	t
UCHAR	GraphUtils.cpp	/^	typedef unsigned char UCHAR;$/;"	t	file:
USE_HIGHGUI	GraphUtils.cpp	6;"	d	file:
Unlink	tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
Unlink	tinyxml2.h	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
UnsignedAttribute	tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
UnsignedValue	tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Untracked	tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
Update	LaRank.cpp	/^void LaRank::Update(const MultiSample& sample, int y)$/;"	f	class:LaRank	signature:(const MultiSample& sample, int y)
Update	LaRank.h	/^	virtual void Update(const MultiSample& x, int y);$/;"	p	class:LaRank	access:public	signature:(const MultiSample& x, int y)
UpdateDebugImage	LaRank.cpp	/^void LaRank::UpdateDebugImage()$/;"	f	class:LaRank	signature:()
UpdateDebugImage	LaRank.h	/^	void UpdateDebugImage();$/;"	p	class:LaRank	access:private	signature:()
UpdateDebugImage	Tracker.cpp	/^void Tracker::UpdateDebugImage(const vector<FloatRect>& samples, const FloatRect& centre, const vector<double>& scores)$/;"	f	class:Tracker	signature:(const vector<FloatRect>& samples, const FloatRect& centre, const vector<double>& scores)
UpdateDebugImage	Tracker.h	/^	void UpdateDebugImage(const std::vector<FloatRect>& samples, const FloatRect& centre, const std::vector<double>& scores);$/;"	p	class:Tracker	access:private	signature:(const std::vector<FloatRect>& samples, const FloatRect& centre, const std::vector<double>& scores)
UpdateFeatureVector	Features.h	/^	virtual void UpdateFeatureVector(const Sample& s) = 0;$/;"	p	class:Features	access:protected	signature:(const Sample& s)
UpdateFeatureVector	HaarFeatures.cpp	/^void HaarFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:HaarFeatures	signature:(const Sample& s)
UpdateFeatureVector	HaarFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:HaarFeatures	access:private	signature:(const Sample& s)
UpdateFeatureVector	HistogramFeatures.cpp	/^void HistogramFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:HistogramFeatures	signature:(const Sample& s)
UpdateFeatureVector	HistogramFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:HistogramFeatures	access:private	signature:(const Sample& s)
UpdateFeatureVector	MultiFeatures.cpp	/^void MultiFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:MultiFeatures	signature:(const Sample& s)
UpdateFeatureVector	MultiFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:MultiFeatures	access:private	signature:(const Sample& s)
UpdateFeatureVector	RawFeatures.cpp	/^void RawFeatures::UpdateFeatureVector(const Sample& s)$/;"	f	class:RawFeatures	signature:(const Sample& s)
UpdateFeatureVector	RawFeatures.h	/^	virtual void UpdateFeatureVector(const Sample& s);$/;"	p	class:RawFeatures	access:private	signature:(const Sample& s)
UpdateLearner	Tracker.cpp	/^void Tracker::UpdateLearner(const ImageRep& image)$/;"	f	class:Tracker	signature:(const ImageRep& image)
UpdateLearner	Tracker.h	/^	void UpdateLearner(const ImageRep& image);$/;"	p	class:Tracker	access:private	signature:(const ImageRep& image)
User_Handler_Func	DJI_LIB/DJI_Pro_App.h	/^typedef void (*User_Handler_Func)(ProHeader *pHeader);$/;"	t
VERBOSE	Config.h	35;"	d
VERT_POS	DJI_LIB/DJI_Pro_App.h	53;"	d
VERT_TRU	DJI_LIB/DJI_Pro_App.h	54;"	d
VERT_VEL	DJI_LIB/DJI_Pro_App.h	52;"	d
Value	tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
Value	tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode	signature:() const
Value	tinyxml2.h	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
Value	tinyxml2.h	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:() const
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
Visit	tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitExit	tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element )
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
WHITE	GraphUtils.cpp	/^const CvScalar WHITE = CV_RGB(255,255,255);$/;"	v
Whitespace	tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
Width	Rect.h	/^	inline T Width() const { return m_width; }$/;"	f	class:Rect	access:public	signature:() const
XCentre	Rect.h	/^	inline float XCentre() const { return (float)m_xMin + (float)m_width \/ 2; }$/;"	f	class:Rect	access:public	signature:() const
XMLAttribute	tinyxml2.h	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
XMLAttribute	tinyxml2.h	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
XMLAttribute	tinyxml2.h	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
XMLComment	tinyxml2.h	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
XMLComment	tinyxml2.h	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:private	signature:( const XMLComment& )
XMLComment	tinyxml2.h	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
XMLConstHandle	tinyxml2.h	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
XMLDeclaration	tinyxml2.h	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
XMLDeclaration	tinyxml2.h	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:private	signature:( const XMLDeclaration& )
XMLDeclaration	tinyxml2.h	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLDocument	tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
XMLDocument	tinyxml2.h	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
XMLDocument	tinyxml2.h	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
XMLDocument	tinyxml2.h	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLElement	tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
XMLElement	tinyxml2.h	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
XMLElement	tinyxml2.h	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
XMLElement	tinyxml2.h	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLError	tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
XMLHandle	tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
XMLHandle	tinyxml2.h	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
XMLNode	tinyxml2.h	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
XMLNode	tinyxml2.h	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( const XMLNode& )
XMLNode	tinyxml2.h	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact, int depth )
XMLPrinter	tinyxml2.h	/^    XMLPrinter( FILE* file=0, bool compact = false, int depth = 0 );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false, int depth = 0 )
XMLPrinter	tinyxml2.h	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
XMLText	tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
XMLText	tinyxml2.h	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:private	signature:( const XMLText& )
XMLText	tinyxml2.h	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUnknown	tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
XMLUnknown	tinyxml2.h	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
XMLUnknown	tinyxml2.h	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:private	signature:( const XMLUnknown& )
XMLUnknown	tinyxml2.h	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUtil	tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	tinyxml2.h	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_COUNT	tinyxml2.h	/^	XML_ERROR_COUNT$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	tinyxml2.h	/^    XML_NO_TEXT_NODE,$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
XMax	Rect.h	/^	inline T XMax() const { return m_xMin + m_width; }$/;"	f	class:Rect	access:public	signature:() const
XMin	Rect.h	/^	inline T XMin() const { return m_xMin; }$/;"	f	class:Rect	access:public	signature:() const
YAW_ANG	DJI_LIB/DJI_Pro_App.h	56;"	d
YAW_BODY	DJI_LIB/DJI_Pro_App.h	63;"	d
YAW_GND	DJI_LIB/DJI_Pro_App.h	62;"	d
YAW_RATE	DJI_LIB/DJI_Pro_App.h	57;"	d
YCentre	Rect.h	/^	inline float YCentre() const { return (float)m_yMin + (float)m_height \/ 2; }$/;"	f	class:Rect	access:public	signature:() const
YMax	Rect.h	/^	inline T YMax() const { return m_yMin + m_height; }$/;"	f	class:Rect	access:public	signature:() const
YMin	Rect.h	/^	inline T YMin() const { return m_yMin; }$/;"	f	class:Rect	access:public	signature:() const
_SDK_CALC_CRC_HEAD	DJI_LIB/DJI_Pro_Codec.h	20;"	d
_SDK_CALC_CRC_TAIL	DJI_LIB/DJI_Pro_Codec.h	21;"	d
_SDK_CRC_DATA_SIZE	DJI_LIB/DJI_Pro_Codec.h	13;"	d
_SDK_CRC_HEAD_SIZE	DJI_LIB/DJI_Pro_Codec.h	12;"	d
_SDK_FULL_DATA_SIZE_MIN	DJI_LIB/DJI_Pro_Codec.h	15;"	d
_SDK_HEAD_DATA_LEN	DJI_LIB/DJI_Pro_Codec.h	14;"	d
_SDK_MAX_RECV_SIZE	DJI_LIB/DJI_Pro_Codec.h	10;"	d
_SDK_SOF	DJI_LIB/DJI_Pro_Codec.h	11;"	d
_SDK_U16_SET	DJI_LIB/DJI_Pro_Codec.h	18;"	d
_SDK_U32_SET	DJI_LIB/DJI_Pro_Codec.h	17;"	d
_USE_MATH_DEFINES	Sampler.cpp	31;"	d	file:
__DJI_PRO_APP_H__	DJI_LIB/DJI_Pro_App.h	8;"	d
__DJI_PRO_CODEC_H__	DJI_LIB/DJI_Pro_Codec.h	2;"	d
__DJI_PRO_CONFIG_H__	DJI_LIB/DJI_Pro_Config.h	2;"	d
__DJI_PRO_HW_H__	DJI_LIB/DJI_Pro_Hw.h	2;"	d
__anon10::x	DJI_LIB/DJI_Pro_App.h	/^    signed short x;$/;"	m	struct:__anon10	access:public
__anon10::y	DJI_LIB/DJI_Pro_App.h	/^    signed short y;$/;"	m	struct:__anon10	access:public
__anon10::z	DJI_LIB/DJI_Pro_App.h	/^    signed short z;$/;"	m	struct:__anon10	access:public
__anon11::cur_ctrl_dev_in_navi_mode	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cur_ctrl_dev_in_navi_mode   :3;\/*0->rc  1->app  2->serial*\/$/;"	m	struct:__anon11	access:public
__anon11::reserved	DJI_LIB/DJI_Pro_App.h	/^    unsigned char reserved                    :4;$/;"	m	struct:__anon11	access:public
__anon11::serial_req_status	DJI_LIB/DJI_Pro_App.h	/^    unsigned char serial_req_status           :1;\/*1->opensd  0->close*\/$/;"	m	struct:__anon11	access:public
__anon12::a	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t a;$/;"	m	struct:__anon12	access:public
__anon12::activation	DJI_LIB/DJI_Pro_App.h	/^	 uint8_t activation;$/;"	m	struct:__anon12	access:public
__anon12::battery_remaining_capacity	DJI_LIB/DJI_Pro_App.h	/^    unsigned char battery_remaining_capacity;$/;"	m	struct:__anon12	access:public
__anon12::ctrl_info	DJI_LIB/DJI_Pro_App.h	/^    api_ctrl_info_data_t ctrl_info;$/;"	m	struct:__anon12	access:public
__anon12::gimbal	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t gimbal;$/;"	m	struct:__anon12	access:public
__anon12::mag	DJI_LIB/DJI_Pro_App.h	/^    api_mag_data_t mag;$/;"	m	struct:__anon12	access:public
__anon12::obtained_control	DJI_LIB/DJI_Pro_App.h	/^    uint8_t obtained_control;$/;"	m	struct:__anon12	access:public
__anon12::pos	DJI_LIB/DJI_Pro_App.h	/^    api_pos_data_t pos;$/;"	m	struct:__anon12	access:public
__anon12::q	DJI_LIB/DJI_Pro_App.h	/^    api_quaternion_data_t q;$/;"	m	struct:__anon12	access:public
__anon12::rc	DJI_LIB/DJI_Pro_App.h	/^    api_rc_data_t rc;$/;"	m	struct:__anon12	access:public
__anon12::status	DJI_LIB/DJI_Pro_App.h	/^    unsigned char status;$/;"	m	struct:__anon12	access:public
__anon12::time_stamp	DJI_LIB/DJI_Pro_App.h	/^    unsigned int time_stamp;$/;"	m	struct:__anon12	access:public
__anon12::v	DJI_LIB/DJI_Pro_App.h	/^    api_vel_data_t v;$/;"	m	struct:__anon12	access:public
__anon12::w	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t w;$/;"	m	struct:__anon12	access:public
__anon13::need_encrypt	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	need_encrypt	: 1;$/;"	m	struct:__anon13	access:public
__anon13::reserve	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	reserve	   	: 2;$/;"	m	struct:__anon13	access:public
__anon13::sequence_number	DJI_LIB/DJI_Pro_App.h	/^    unsigned short	sequence_number;$/;"	m	struct:__anon13	access:public
__anon13::session_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	session_id 	: 5;$/;"	m	struct:__anon13	access:public
__anon14::cmd_data	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cmd_data;$/;"	m	struct:__anon14	access:public
__anon14::cmd_sequence	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cmd_sequence;$/;"	m	struct:__anon14	access:public
__anon15::app_api_level	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_api_level;$/;"	m	struct:__anon15	access:public
__anon15::app_bundle_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	app_bundle_id[32];$/;"	m	struct:__anon15	access:public
__anon15::app_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_id;$/;"	m	struct:__anon15	access:public
__anon15::app_key	DJI_LIB/DJI_Pro_App.h	/^    char *app_key;$/;"	m	struct:__anon15	access:public
__anon15::app_ver	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_ver;$/;"	m	struct:__anon15	access:public
__anon16::version_ack	DJI_LIB/DJI_Pro_App.h	/^    unsigned short	version_ack;$/;"	m	struct:__anon16	access:public
__anon16::version_crc	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	version_crc;$/;"	m	struct:__anon16	access:public
__anon16::version_name	DJI_LIB/DJI_Pro_App.h	/^    char     	version_name[32];$/;"	m	struct:__anon16	access:public
__anon17::ctrl_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char ctrl_flag;$/;"	m	struct:__anon17	access:public
__anon17::pitch_or_y	DJI_LIB/DJI_Pro_App.h	/^    float	pitch_or_y;$/;"	m	struct:__anon17	access:public
__anon17::roll_or_x	DJI_LIB/DJI_Pro_App.h	/^    float 	roll_or_x;$/;"	m	struct:__anon17	access:public
__anon17::thr_z	DJI_LIB/DJI_Pro_App.h	/^    float	thr_z;$/;"	m	struct:__anon17	access:public
__anon17::yaw	DJI_LIB/DJI_Pro_App.h	/^    float	yaw;$/;"	m	struct:__anon17	access:public
__anon18::enc_type	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int enc_type : 3;$/;"	m	struct:__anon18	access:public
__anon18::head_crc	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int head_crc : 16;$/;"	m	struct:__anon18	access:public
__anon18::is_ack	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int is_ack : 1;$/;"	m	struct:__anon18	access:public
__anon18::length	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int length : 10;$/;"	m	struct:__anon18	access:public
__anon18::magic	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int magic[0];$/;"	m	struct:__anon18	access:public
__anon18::padding	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int padding : 5;$/;"	m	struct:__anon18	access:public
__anon18::reversed0	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int reversed0 : 2; \/\/ always 0$/;"	m	struct:__anon18	access:public
__anon18::reversed1	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int reversed1 : 24;$/;"	m	struct:__anon18	access:public
__anon18::sequence_number	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int sequence_number : 16;$/;"	m	struct:__anon18	access:public
__anon18::session_id	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int session_id : 5;$/;"	m	struct:__anon18	access:public
__anon18::sof	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int sof : 8; \/\/ 1byte$/;"	m	struct:__anon18	access:public
__anon18::version	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int version : 6; \/\/ 2byte$/;"	m	struct:__anon18	access:public
__anon19::comm_key	DJI_LIB/DJI_Pro_Codec.h	/^    unsigned char         comm_key[32];$/;"	m	struct:__anon19	access:public
__anon19::comm_recv_buf	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned char comm_recv_buf[_SDK_MAX_RECV_SIZE];$/;"	m	struct:__anon19	access:public
__anon19::enc_enabled	DJI_LIB/DJI_Pro_Codec.h	/^    unsigned char         enc_enabled;$/;"	m	struct:__anon19	access:public
__anon19::recv_index	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short recv_index;$/;"	m	struct:__anon19	access:public
__anon19::reuse_count	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short reuse_count;$/;"	m	struct:__anon19	access:public
__anon19::reuse_index	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short reuse_index;$/;"	m	struct:__anon19	access:public
__anon1::__anon2::base	DJI_LIB/DJI_Pro_App.h	/^        unsigned char base : 1;$/;"	m	struct:__anon1::__anon2	access:public
__anon1::__anon2::pitch_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char pitch_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
__anon1::__anon2::reserve	DJI_LIB/DJI_Pro_App.h	/^        unsigned char reserve : 4;$/;"	m	struct:__anon1::__anon2	access:public
__anon1::__anon2::roll_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char roll_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
__anon1::__anon2::yaw_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char yaw_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
__anon1::ctrl_byte	DJI_LIB/DJI_Pro_App.h	/^    }ctrl_byte;$/;"	m	struct:__anon1	typeref:struct:__anon1::__anon2	access:public
__anon1::duration	DJI_LIB/DJI_Pro_App.h	/^    unsigned char duration;$/;"	m	struct:__anon1	access:public
__anon1::pitch_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch_angle;$/;"	m	struct:__anon1	access:public
__anon1::roll_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short roll_angle;$/;"	m	struct:__anon1	access:public
__anon1::yaw_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw_angle;$/;"	m	struct:__anon1	access:public
__anon20::baudrate	DJI_LIB/DJI_Pro_Hw.cpp	/^    int baudrate;$/;"	m	struct:__anon20	file:	access:public
__anon20::index	DJI_LIB/DJI_Pro_Hw.cpp	/^    int index;$/;"	m	struct:__anon20	file:	access:public
__anon28::x	ImageThread.h	/^    int x;$/;"	m	struct:__anon28	access:public
__anon28::y	ImageThread.h	/^    int y;$/;"	m	struct:__anon28	access:public
__anon3::__anon4::ctrl_switch	DJI_LIB/DJI_Pro_App.h	/^        unsigned char ctrl_switch : 1;\/\/decide increment mode or absolute mode$/;"	m	struct:__anon3::__anon4	access:public
__anon3::__anon4::reserve	DJI_LIB/DJI_Pro_App.h	/^        unsigned char reserve : 7;$/;"	m	struct:__anon3::__anon4	access:public
__anon3::ctrl_byte	DJI_LIB/DJI_Pro_App.h	/^    }ctrl_byte;$/;"	m	struct:__anon3	typeref:struct:__anon3::__anon4	access:public
__anon3::pitch_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch_angle_rate;$/;"	m	struct:__anon3	access:public
__anon3::roll_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short roll_angle_rate;$/;"	m	struct:__anon3	access:public
__anon3::yaw_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw_angle_rate;$/;"	m	struct:__anon3	access:public
__anon5::q0	DJI_LIB/DJI_Pro_App.h	/^    fp32 q0;$/;"	m	struct:__anon5	access:public
__anon5::q1	DJI_LIB/DJI_Pro_App.h	/^    fp32 q1;$/;"	m	struct:__anon5	access:public
__anon5::q2	DJI_LIB/DJI_Pro_App.h	/^    fp32 q2;$/;"	m	struct:__anon5	access:public
__anon5::q3	DJI_LIB/DJI_Pro_App.h	/^    fp32 q3;$/;"	m	struct:__anon5	access:public
__anon6::x	DJI_LIB/DJI_Pro_App.h	/^    fp32 x;$/;"	m	struct:__anon6	access:public
__anon6::y	DJI_LIB/DJI_Pro_App.h	/^    fp32 y;$/;"	m	struct:__anon6	access:public
__anon6::z	DJI_LIB/DJI_Pro_App.h	/^    fp32 z;$/;"	m	struct:__anon6	access:public
__anon7::feedback_sensor_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char feedback_sensor_id  :4;$/;"	m	struct:__anon7	access:public
__anon7::health_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char health_flag         :1;$/;"	m	struct:__anon7	access:public
__anon7::reserve	DJI_LIB/DJI_Pro_App.h	/^    unsigned char reserve             :3;$/;"	m	struct:__anon7	access:public
__anon7::x	DJI_LIB/DJI_Pro_App.h	/^    fp32 x;$/;"	m	struct:__anon7	access:public
__anon7::y	DJI_LIB/DJI_Pro_App.h	/^    fp32 y;$/;"	m	struct:__anon7	access:public
__anon7::z	DJI_LIB/DJI_Pro_App.h	/^    fp32 z;$/;"	m	struct:__anon7	access:public
__anon8::alti	DJI_LIB/DJI_Pro_App.h	/^    fp32 alti;$/;"	m	struct:__anon8	access:public
__anon8::health_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char health_flag;$/;"	m	struct:__anon8	access:public
__anon8::height	DJI_LIB/DJI_Pro_App.h	/^    fp32 height;$/;"	m	struct:__anon8	access:public
__anon8::lati	DJI_LIB/DJI_Pro_App.h	/^    fp64 lati;$/;"	m	struct:__anon8	access:public
__anon8::longti	DJI_LIB/DJI_Pro_App.h	/^    fp64 longti;$/;"	m	struct:__anon8	access:public
__anon9::gear	DJI_LIB/DJI_Pro_App.h	/^    signed short gear;$/;"	m	struct:__anon9	access:public
__anon9::mode	DJI_LIB/DJI_Pro_App.h	/^    signed short mode;$/;"	m	struct:__anon9	access:public
__anon9::pitch	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch;$/;"	m	struct:__anon9	access:public
__anon9::roll	DJI_LIB/DJI_Pro_App.h	/^    signed short roll;$/;"	m	struct:__anon9	access:public
__anon9::throttle	DJI_LIB/DJI_Pro_App.h	/^    signed short throttle;$/;"	m	struct:__anon9	access:public
__anon9::yaw	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw;$/;"	m	struct:__anon9	access:public
_allocated	tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
_attributePool	tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_blockPtrs	tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_buffer	tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_charBuffer	tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
_closingType	tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
_commentPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_compactMode	tinyxml2.h	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_currentAllocs	tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_depth	tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_document	tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
_elementJustOpened	tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
_elementPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_end	tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
_entityFlag	tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_errorID	tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorNames	tinyxml2.cpp	/^const char* XMLDocument::_errorNames[XML_ERROR_COUNT] = {$/;"	m	class:tinyxml2::XMLDocument	file:
_errorNames	tinyxml2.h	/^	static const char* _errorNames[XML_ERROR_COUNT];$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr1	tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr2	tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
_firstChild	tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_firstElement	tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_flags	tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
_fp	tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_isCData	tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
_lastChild	tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_maxAllocs	tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_mem	tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
_memPool	tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
_memPool	tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_nAllocs	tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_nUntracked	tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
_name	tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
_node	tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
_node	tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
_parent	tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
_pool	tinyxml2.h	/^    T   _pool[INITIAL_SIZE];$/;"	m	class:tinyxml2::DynArray	access:private
_prev	tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
_processEntities	tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
_processEntities	tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_restrictedEntityFlag	tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_root	tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
_rootAttribute	tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
_size	tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
_stack	tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
_start	tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
_textDepth	tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_textPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_value	tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
_value	tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_whitespace	tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
_writeBOM	tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
a	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t a;$/;"	m	struct:__anon12	access:public
ack_callback	DJI_LIB/DJI_Pro_Link.h	/^	ACK_Callback_Func ack_callback;$/;"	m	struct:ProSendParameter	access:public
ack_callback	DJI_LIB/DJI_Pro_Rmu.h	/^	ACK_Callback_Func ack_callback;$/;"	m	struct:CMD_Session_Tab	access:public
ack_timeout	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short ack_timeout;	\/\/unit is ms$/;"	m	struct:ProSendParameter	access:public
ack_timeout	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int ack_timeout : 16;$/;"	m	struct:CMD_Session_Tab	access:public
activate_api_lock	DJI_LIB/DJI_Pro_App.cpp	/^static int activate_api_lock = -1;$/;"	v	file:
activate_data_t	DJI_LIB/DJI_Pro_App.h	/^}activate_data_t;$/;"	t	typeref:struct:__anon15
activation	DJI_LIB/DJI_Pro_App.h	/^	 uint8_t activation;$/;"	m	struct:__anon12	access:public
aes256_context	DJI_LIB/DJI_Pro_Codec.cpp	/^} aes256_context;$/;"	t	typeref:struct:tagAES256Context	file:
aes256_decrypt_ecb	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes256_decrypt_ecb(aes256_context *ctx, unsigned char *buf)$/;"	f	signature:(aes256_context *ctx, unsigned char *buf)
aes256_done	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes256_done(aes256_context *ctx)$/;"	f	signature:(aes256_context *ctx)
aes256_encrypt_ecb	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes256_encrypt_ecb(aes256_context *ctx, unsigned char *buf)$/;"	f	signature:(aes256_context *ctx, unsigned char *buf)
aes256_init	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes256_init(aes256_context *ctx, unsigned char *k)$/;"	f	signature:(aes256_context *ctx, unsigned char *k)
aes_addRoundKey	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_addRoundKey(unsigned char *buf, unsigned char *key)$/;"	f	signature:(unsigned char *buf, unsigned char *key)
aes_addRoundKey_cpy	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_addRoundKey_cpy(unsigned char *buf, unsigned char *key, unsigned char *cpk)$/;"	f	signature:(unsigned char *buf, unsigned char *key, unsigned char *cpk)
aes_expandDecKey	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_expandDecKey(unsigned char *k, unsigned char *rc)$/;"	f	signature:(unsigned char *k, unsigned char *rc)
aes_expandEncKey	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_expandEncKey(unsigned char *k, unsigned char *rc)$/;"	f	signature:(unsigned char *k, unsigned char *rc)
aes_mixColumns	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_mixColumns(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
aes_mixColumns_inv	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_mixColumns_inv(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
aes_shiftRows	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_shiftRows(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
aes_shiftRows_inv	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_shiftRows_inv(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
aes_subBytes	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_subBytes(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
aes_subBytes_inv	DJI_LIB/DJI_Pro_Codec.cpp	/^void aes_subBytes_inv(unsigned char *buf)$/;"	f	signature:(unsigned char *buf)
alti	DJI_LIB/DJI_Pro_App.h	/^    fp32 alti;$/;"	m	struct:__anon8	access:public
api_common_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_common_data_t;$/;"	t	typeref:struct:__anon6
api_ctrl_info_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_ctrl_info_data_t;$/;"	t	typeref:struct:__anon11
api_mag_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_mag_data_t;$/;"	t	typeref:struct:__anon10
api_pos_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_pos_data_t;$/;"	t	typeref:struct:__anon8
api_quaternion_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_quaternion_data_t;$/;"	t	typeref:struct:__anon5
api_rc_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_rc_data_t;$/;"	t	typeref:struct:__anon9
api_vel_data_t	DJI_LIB/DJI_Pro_App.h	/^}api_vel_data_t;$/;"	t	typeref:struct:__anon7
app_api_level	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_api_level;$/;"	m	struct:__anon15	access:public
app_bundle_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	app_bundle_id[32];$/;"	m	struct:__anon15	access:public
app_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_id;$/;"	m	struct:__anon15	access:public
app_key	DJI_LIB/DJI_Pro_App.h	/^    char *app_key;$/;"	m	struct:__anon15	access:public
app_ver	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	app_ver;$/;"	m	struct:__anon15	access:public
atti_ctrl_sample_flag	DJI_Pro_Sample.cpp	/^static int atti_ctrl_sample_flag = -1;$/;"	v	file:
attitude_data_t	DJI_LIB/DJI_Pro_App.h	/^}attitude_data_t;$/;"	t	typeref:struct:__anon17
b	LaRank.h	/^		double b;$/;"	m	struct:LaRank::SupportVector	access:public
base	DJI_LIB/DJI_Pro_App.h	/^        unsigned char base : 1;$/;"	m	struct:__anon1::__anon2	access:public
battery_remaining_capacity	DJI_LIB/DJI_Pro_App.h	/^    unsigned char battery_remaining_capacity;$/;"	m	struct:__anon12	access:public
baud_index_t	DJI_LIB/DJI_Pro_Hw.cpp	/^Baud_index baud_index_t[] =$/;"	v
baudrate	DJI_LIB/DJI_Pro_Hw.cpp	/^    int baudrate;$/;"	m	struct:__anon20	file:	access:public
bool	GraphUtils.h	/^	typedef int bool;$/;"	t
buf	DJI_LIB/DJI_Pro_Link.h	/^	unsigned char *buf;$/;"	m	struct:ProAckParameter	access:public
buf	DJI_LIB/DJI_Pro_Link.h	/^	unsigned char *buf;$/;"	m	struct:ProSendParameter	access:public
callfopen	tinyxml2.cpp	/^static FILE* callfopen( const char* filepath, const char* mode )$/;"	f	namespace:tinyxml2	signature:( const char* filepath, const char* mode )
chunk	tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
cmd_agency_data_t	DJI_LIB/DJI_Pro_App.h	/^}cmd_agency_data_t;$/;"	t	typeref:struct:__anon14
cmd_data	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cmd_data;$/;"	m	struct:__anon14	access:public
cmd_sequence	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cmd_sequence;$/;"	m	struct:__anon14	access:public
comm_key	DJI_LIB/DJI_Pro_Codec.h	/^    unsigned char         comm_key[32];$/;"	m	struct:__anon19	access:public
comm_recv_buf	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned char comm_recv_buf[_SDK_MAX_RECV_SIZE];$/;"	m	struct:__anon19	access:public
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
countGraph	GraphUtils.cpp	/^int countGraph = 0;	\/\/ Used by 'getGraphColor()'$/;"	v
crc16_update	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned short crc16_update(unsigned short crc, unsigned char ch)$/;"	f	signature:(unsigned short crc, unsigned char ch)
crc32_update	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned int crc32_update(unsigned int crc, unsigned char ch)$/;"	f	signature:(unsigned int crc, unsigned char ch)
crc_tab16	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned short crc_tab16[] =$/;"	v
crc_tab32	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned int crc_tab32[] =$/;"	v
ctrl_byte	DJI_LIB/DJI_Pro_App.h	/^    }ctrl_byte;$/;"	m	struct:__anon1	typeref:struct:__anon1::__anon2	access:public
ctrl_byte	DJI_LIB/DJI_Pro_App.h	/^    }ctrl_byte;$/;"	m	struct:__anon3	typeref:struct:__anon3::__anon4	access:public
ctrl_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char ctrl_flag;$/;"	m	struct:__anon17	access:public
ctrl_info	DJI_LIB/DJI_Pro_App.h	/^    api_ctrl_info_data_t ctrl_info;$/;"	m	struct:__anon12	access:public
ctrl_switch	DJI_LIB/DJI_Pro_App.h	/^        unsigned char ctrl_switch : 1;\/\/decide increment mode or absolute mode$/;"	m	struct:__anon3::__anon4	access:public
cur_ctrl_dev_in_navi_mode	DJI_LIB/DJI_Pro_App.h	/^    unsigned char cur_ctrl_dev_in_navi_mode   :3;\/*0->rc  1->app  2->serial*\/$/;"	m	struct:__anon11	access:public
customGraphColor	GraphUtils.cpp	/^CvScalar customGraphColor;$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
debugMode	Config.h	/^	bool							debugMode;$/;"	m	class:Config	access:public
deckey	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char deckey[32];$/;"	m	struct:tagAES256Context	file:	access:public
drawFloatGraph	GraphUtils.cpp	/^IplImage* drawFloatGraph(const float *arraySrc, int nArrayLength, IplImage *imageDst, float minV, float maxV, int width, int height, char *graphLabel, bool showScale)$/;"	f	signature:(const float *arraySrc, int nArrayLength, IplImage *imageDst, float minV, float maxV, int width, int height, char *graphLabel, bool showScale)
drawFloatGraph	GraphUtils.h	/^IplImage* drawFloatGraph(const float *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), float minV DEFAULT(0.0), float maxV DEFAULT(0.0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true));$/;"	p	signature:(const float *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), float minV DEFAULT(0.0), float maxV DEFAULT(0.0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true))
drawIntGraph	GraphUtils.cpp	/^IplImage* drawIntGraph(const int *arraySrc, int nArrayLength, IplImage *imageDst, int minV, int maxV, int width, int height, char *graphLabel, bool showScale)$/;"	f	signature:(const int *arraySrc, int nArrayLength, IplImage *imageDst, int minV, int maxV, int width, int height, char *graphLabel, bool showScale)
drawIntGraph	GraphUtils.h	/^IplImage* drawIntGraph(const int *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), int minV DEFAULT(0), int maxV DEFAULT(0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true));$/;"	p	signature:(const int *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), int minV DEFAULT(0), int maxV DEFAULT(0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true))
drawUCharGraph	GraphUtils.cpp	/^IplImage* drawUCharGraph(const uchar *arraySrc, int nArrayLength, IplImage *imageDst, int minV, int maxV, int width, int height, char *graphLabel, bool showScale)$/;"	f	signature:(const uchar *arraySrc, int nArrayLength, IplImage *imageDst, int minV, int maxV, int width, int height, char *graphLabel, bool showScale)
drawUCharGraph	GraphUtils.h	/^IplImage* drawUCharGraph(const uchar *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), int minV DEFAULT(0), int maxV DEFAULT(0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true));$/;"	p	signature:(const uchar *arraySrc, int nArrayLength, IplImage *imageDst DEFAULT(0), int minV DEFAULT(0), int maxV DEFAULT(0), int width DEFAULT(0), int height DEFAULT(0), char *graphLabel DEFAULT(0), bool showScale DEFAULT(true))
duration	DJI_LIB/DJI_Pro_App.h	/^    unsigned char duration;$/;"	m	struct:__anon1	access:public
enc_enabled	DJI_LIB/DJI_Pro_Codec.h	/^    unsigned char         enc_enabled;$/;"	m	struct:__anon19	access:public
enc_type	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int enc_type : 3;$/;"	m	struct:__anon18	access:public
enc_type	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int enc_type : 3;$/;"	m	struct:ProHeader	access:public
enckey	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char enckey[32];$/;"	m	struct:tagAES256Context	file:	access:public
entities	tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
false	GraphUtils.h	19;"	d
feature	Config.h	/^		FeatureType feature;$/;"	m	struct:Config::FeatureKernelPair	access:public
features	Config.h	/^	std::vector<FeatureKernelPair>	features;$/;"	m	class:Config	access:public
feedback_sensor_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char feedback_sensor_id  :4;$/;"	m	struct:__anon7	access:public
findindex	DJI_LIB/DJI_Pro_Hw.cpp	/^int DJI_Pro_Hw::findindex(int baudrate)$/;"	f	class:DJI_Pro_Hw	signature:(int baudrate)
findindex	DJI_LIB/DJI_Pro_Hw.h	/^    int findindex(int);$/;"	p	class:DJI_Pro_Hw	access:private	signature:(int)
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
fp32	DJI_LIB/DJI_Pro_App.h	/^typedef float 	fp32;$/;"	t
fp64	DJI_LIB/DJI_Pro_App.h	/^typedef double	fp64;$/;"	t
frameHeight	Config.h	/^	int								frameHeight;$/;"	m	class:Config	access:public
frameWidth	Config.h	/^	int								frameWidth;$/;"	m	class:Config	access:public
from_user_account_data	DJI_LIB/DJI_Pro_App.cpp	/^static activate_data_t from_user_account_data;$/;"	v	file:
g	LaRank.h	/^		double g;$/;"	m	struct:LaRank::SupportVector	access:public
gear	DJI_LIB/DJI_Pro_App.h	/^    signed short gear;$/;"	m	struct:__anon9	access:public
getGraphColor	GraphUtils.cpp	/^CvScalar getGraphColor(void)$/;"	f	signature:(void)
get_api_ver_lock	DJI_LIB/DJI_Pro_App.cpp	/^static int get_api_ver_lock = -1;$/;"	v	file:
gf_alog	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char gf_alog(unsigned char x) \/\/ calculate anti-logarithm gen 3$/;"	f	signature:(unsigned char x)
gf_log	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char gf_log(unsigned char x) \/\/ calculate logarithm gen 3$/;"	f	signature:(unsigned char x)
gf_mulinv	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char gf_mulinv(unsigned char x) \/\/ calculate multiplicative inverse$/;"	f	signature:(unsigned char x)
gimbal	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t gimbal;$/;"	m	struct:__anon12	access:public
gimbal_ctrl_sample_flag	DJI_Pro_Sample.cpp	/^static int gimbal_ctrl_sample_flag = -1;$/;"	v	file:
gimbal_custom_control_angle_t	DJI_LIB/DJI_Pro_App.h	/^}gimbal_custom_control_angle_t;$/;"	t	typeref:struct:__anon1
gimbal_custom_speed_t	DJI_LIB/DJI_Pro_App.h	/^}gimbal_custom_speed_t;$/;"	t	typeref:struct:__anon3
head_crc	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int head_crc : 16;$/;"	m	struct:__anon18	access:public
head_crc	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int head_crc : 16;$/;"	m	struct:ProHeader	access:public
health_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char health_flag         :1;$/;"	m	struct:__anon7	access:public
health_flag	DJI_LIB/DJI_Pro_App.h	/^    unsigned char health_flag;$/;"	m	struct:__anon8	access:public
height	DJI_LIB/DJI_Pro_App.h	/^    fp32 height;$/;"	m	struct:__anon8	access:public
image	LaRank.h	/^		cv::Mat image;$/;"	m	struct:LaRank::SupportVector	access:public
imagepoint	ImageThread.h	/^}imagepoint;$/;"	t	typeref:struct:__anon28
images	LaRank.h	/^		std::vector<cv::Mat> images;$/;"	m	struct:LaRank::SupportPattern	access:public
index	DJI_LIB/DJI_Pro_Hw.cpp	/^    int index;$/;"	m	struct:__anon20	file:	access:public
is_ack	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int is_ack : 1;$/;"	m	struct:__anon18	access:public
is_ack	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int is_ack : 1;$/;"	m	struct:ProHeader	access:public
kFeatureTypeHaar	Config.h	/^		kFeatureTypeHaar,$/;"	e	enum:Config::FeatureType
kFeatureTypeHistogram	Config.h	/^		kFeatureTypeHistogram$/;"	e	enum:Config::FeatureType
kFeatureTypeRaw	Config.h	/^		kFeatureTypeRaw,$/;"	e	enum:Config::FeatureType
kKernelTypeChi2	Config.h	/^		kKernelTypeChi2$/;"	e	enum:Config::KernelType
kKernelTypeGaussian	Config.h	/^		kKernelTypeGaussian,$/;"	e	enum:Config::KernelType
kKernelTypeIntersection	Config.h	/^		kKernelTypeIntersection,$/;"	e	enum:Config::KernelType
kKernelTypeLinear	Config.h	/^		kKernelTypeLinear,$/;"	e	enum:Config::KernelType
kLiveBoxHeight	ImageThread.cpp	/^static const int kLiveBoxHeight = 80;$/;"	v	file:
kLiveBoxWidth	ImageThread.cpp	/^static const int kLiveBoxWidth = 80;$/;"	v	file:
kMaxSVs	LaRank.cpp	/^static const int kMaxSVs = 2000; \/\/ TODO (only used when no budget)$/;"	v	file:
kNumBins	HistogramFeatures.cpp	/^static const int kNumBins = 16;$/;"	v	file:
kNumBins	ImageRep.cpp	/^static const int kNumBins = 16;$/;"	v	file:
kNumCellsX	HistogramFeatures.cpp	/^static const int kNumCellsX = 3;$/;"	v	file:
kNumCellsY	HistogramFeatures.cpp	/^static const int kNumCellsY = 3;$/;"	v	file:
kNumLevels	HistogramFeatures.cpp	/^static const int kNumLevels = 4;$/;"	v	file:
kPatchSize	RawFeatures.cpp	/^static const int kPatchSize = 16;$/;"	v	file:
kSystematicFeatureCount	HaarFeatures.cpp	/^static const int kSystematicFeatureCount = 192;$/;"	v	file:
kTileSize	LaRank.cpp	/^static const int kTileSize = 30;$/;"	v	file:
kernel	Config.h	/^		KernelType kernel;$/;"	m	struct:Config::FeatureKernelPair	access:public
key	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char key[32];$/;"	m	struct:tagAES256Context	file:	access:public
lati	DJI_LIB/DJI_Pro_App.h	/^    fp64 lati;$/;"	m	struct:__anon8	access:public
length	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int length : 10;$/;"	m	struct:__anon18	access:public
length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length : 10;$/;"	m	struct:ProHeader	access:public
length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length;$/;"	m	struct:ProAckParameter	access:public
length	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int length;$/;"	m	struct:ProSendParameter	access:public
length	tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
load_con	DJI_LIB/DJI_Pro_Hw.h	/^    int load_con;$/;"	m	class:DJI_Pro_Hw	access:public
longti	DJI_LIB/DJI_Pro_App.h	/^    fp64 longti;$/;"	m	struct:__anon8	access:public
m_C	LaRank.h	/^	double m_C;$/;"	m	class:LaRank	access:private
m_K	LaRank.h	/^	Eigen::MatrixXd m_K;$/;"	m	class:LaRank	access:private
m_bb	HaarFeature.h	/^	FloatRect m_bb;$/;"	m	class:HaarFeature	access:private
m_bb	Tracker.h	/^	FloatRect m_bb;$/;"	m	class:Tracker	access:private
m_channels	ImageRep.h	/^	int m_channels;$/;"	m	class:ImageRep	access:private
m_config	LaRank.h	/^	const Config& m_config;$/;"	m	class:LaRank	access:private
m_config	Tracker.h	/^	const Config& m_config;$/;"	m	class:Tracker	access:private
m_counts	Kernels.h	/^	std::vector<int> m_counts;	$/;"	m	class:MultiKernel	access:private
m_debugImage	LaRank.h	/^	cv::Mat m_debugImage;$/;"	m	class:LaRank	access:private
m_debugImage	Tracker.h	/^	cv::Mat m_debugImage;$/;"	m	class:Tracker	access:private
m_factor	HaarFeature.h	/^	float m_factor;$/;"	m	class:HaarFeature	access:private
m_featVec	Features.h	/^	Eigen::VectorXd m_featVec;$/;"	m	class:Features	access:protected
m_featureCount	Features.h	/^	int m_featureCount;$/;"	m	class:Features	access:protected
m_features	HaarFeatures.h	/^	std::vector<HaarFeature> m_features;$/;"	m	class:HaarFeatures	access:private
m_features	LaRank.h	/^	const Features& m_features;$/;"	m	class:LaRank	access:private
m_features	MultiFeatures.h	/^	std::vector<Features*> m_features;$/;"	m	class:MultiFeatures	access:private
m_features	Tracker.h	/^	std::vector<Features*> m_features;$/;"	m	class:Tracker	access:private
m_height	Rect.h	/^	T m_height;$/;"	m	class:Rect	access:private
m_image	Sample.h	/^	const ImageRep& m_image;$/;"	m	class:MultiSample	access:private
m_image	Sample.h	/^	const ImageRep& m_image;$/;"	m	class:Sample	access:private
m_images	ImageRep.h	/^	std::vector<cv::Mat> m_images;$/;"	m	class:ImageRep	access:private
m_initialised	Tracker.h	/^	bool m_initialised;$/;"	m	class:Tracker	access:private
m_integralHistImages	ImageRep.h	/^	std::vector<cv::Mat> m_integralHistImages;$/;"	m	class:ImageRep	access:private
m_integralImages	ImageRep.h	/^	std::vector<cv::Mat> m_integralImages;$/;"	m	class:ImageRep	access:private
m_kernel	LaRank.h	/^	const Kernel& m_kernel;$/;"	m	class:LaRank	access:private
m_kernels	Kernels.h	/^	std::vector<Kernel*> m_kernels;$/;"	m	class:MultiKernel	access:private
m_kernels	Tracker.h	/^	std::vector<Kernel*> m_kernels;$/;"	m	class:Tracker	access:private
m_n	Kernels.h	/^	int m_n;$/;"	m	class:MultiKernel	access:private
m_needsIntegralHist	Tracker.h	/^	bool m_needsIntegralHist;$/;"	m	class:Tracker	access:private
m_needsIntegralImage	Tracker.h	/^	bool m_needsIntegralImage;$/;"	m	class:Tracker	access:private
m_norm	Kernels.h	/^	double m_norm;$/;"	m	class:MultiKernel	access:private
m_pLearner	Tracker.h	/^	LaRank* m_pLearner;$/;"	m	class:Tracker	access:private
m_patchImage	RawFeatures.h	/^	cv::Mat m_patchImage;$/;"	m	class:RawFeatures	access:private
m_rect	ImageRep.h	/^	IntRect m_rect;$/;"	m	class:ImageRep	access:private
m_rects	HaarFeature.h	/^	std::vector<FloatRect> m_rects;$/;"	m	class:HaarFeature	access:private
m_rects	Sample.h	/^	std::vector<FloatRect> m_rects;$/;"	m	class:MultiSample	access:private
m_roi	Sample.h	/^	FloatRect m_roi;$/;"	m	class:Sample	access:private
m_sigma	Kernels.h	/^	double m_sigma;$/;"	m	class:GaussianKernel	access:private
m_sps	LaRank.h	/^	std::vector<SupportPattern*> m_sps;$/;"	m	class:LaRank	access:private
m_svs	LaRank.h	/^	std::vector<SupportVector*> m_svs;$/;"	m	class:LaRank	access:private
m_weights	HaarFeature.h	/^	std::vector<float> m_weights;$/;"	m	class:HaarFeature	access:private
m_width	Rect.h	/^	T m_width;$/;"	m	class:Rect	access:private
m_xMin	Rect.h	/^	T m_xMin;$/;"	m	class:Rect	access:private
m_yMin	Rect.h	/^	T m_yMin;$/;"	m	class:Rect	access:private
mag	DJI_LIB/DJI_Pro_App.h	/^    api_mag_data_t mag;$/;"	m	struct:__anon12	access:public
magic	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int magic[0];$/;"	m	struct:__anon18	access:public
magic	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int magic[0];$/;"	m	struct:ProHeader	access:public
main	main.cpp	/^int main(int argc,char **argv)$/;"	f	signature:(int argc,char **argv)
mem	tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
mem_size	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int mem_size : 16;$/;"	m	struct:MMU_Tab	access:public
mmu	DJI_LIB/DJI_Pro_Rmu.h	/^	MMU_Tab *mmu;$/;"	m	struct:ACK_Session_Tab	access:public
mmu	DJI_LIB/DJI_Pro_Rmu.h	/^	MMU_Tab *mmu;$/;"	m	struct:CMD_Session_Tab	access:public
mmu_lock	DJI_LIB/DJI_Pro_Rmu.cpp	/^static pthread_mutex_t mmu_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
mode	DJI_LIB/DJI_Pro_App.h	/^    signed short mode;$/;"	m	struct:__anon9	access:public
myvector	ImageThread.cpp	/^vector<int> myvector;$/;"	v
need_encrypt	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	need_encrypt	: 1;$/;"	m	struct:__anon13	access:public
need_encrypt	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short need_encrypt : 1;$/;"	m	struct:ProSendParameter	access:public
need_encrypt	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short need_encrypt : 8;$/;"	m	struct:ProAckParameter	access:public
newregion	ImageThread.cpp	/^bool newregion = false;$/;"	v
next	tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
obtained_control	DJI_LIB/DJI_Pro_App.h	/^    uint8_t obtained_control;$/;"	m	struct:__anon12	access:public
onMouse	ImageThread.cpp	/^void onMouse(int event, int x, int y, int, void*)$/;"	f	signature:(int event, int x, int y, int, void*)
onMouse	ImageThread.h	/^void onMouse(int,int,int,int,void*);$/;"	p	signature:(int,int,int,int,void*)
operator <<	Config.cpp	/^ostream& operator<< (ostream& out, const Config& conf)$/;"	f	signature:(ostream& out, const Config& conf)
operator <<	Config.h	/^	friend std::ostream& operator<< (std::ostream& out, const Config& conf);$/;"	p	class:Config	access:friend	signature:(std::ostream& out, const Config& conf)
operator <<	Rect.h	/^	friend std::ostream& operator <<(std::ostream &rOS, const Rect<T2>& rRect);$/;"	p	class:Rect	access:friend	signature:(std::ostream &rOS, const Rect<T2>& rRect)
operator <<	Rect.h	/^std::ostream& operator <<(std::ostream &rOS, const Rect<T>& rRect)$/;"	f	signature:(std::ostream &rOS, const Rect<T>& rRect)
operator =	tinyxml2.h	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:private	signature:( const XMLComment& )
operator =	tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
operator =	tinyxml2.h	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:private	signature:( const XMLDeclaration& )
operator =	tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
operator =	tinyxml2.h	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( const XMLNode& )
operator =	tinyxml2.h	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:private	signature:( const XMLText& )
operator =	tinyxml2.h	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:private	signature:( const XMLUnknown& )
operator =	tinyxml2.h	/^    void operator=( StrPair& other );	\/\/ not supported, use TransferTo()$/;"	p	class:tinyxml2::StrPair	access:private	signature:( StrPair& other )
operator =	tinyxml2.h	/^    void operator=( const DynArray& ); \/\/ not supported$/;"	p	class:tinyxml2::DynArray	access:private	signature:( const DynArray& )
operator =	tinyxml2.h	/^    void operator=( const MemPoolT& ); \/\/ not supported$/;"	p	class:tinyxml2::MemPoolT	access:private	signature:( const MemPoolT& )
operator =	tinyxml2.h	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
operator =	tinyxml2.h	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
operator =	tinyxml2.h	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
operator []	tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
operator []	tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
originMouse	ImageThread.cpp	/^Point originMouse;$/;"	v
p_activate_api_interface	DJI_LIB/DJI_Pro_App.cpp	/^static Command_Result_Notify p_activate_api_interface = 0;$/;"	v	file:
p_control_management_interface	DJI_LIB/DJI_Pro_App.cpp	/^static Command_Result_Notify p_control_management_interface = 0;$/;"	v	file:
p_get_api_ver_interface	DJI_LIB/DJI_Pro_App.cpp	/^static Get_API_Version_Notify p_get_api_ver_interface = 0;$/;"	v	file:
p_status_ctrl_interface	DJI_LIB/DJI_Pro_App.cpp	/^static Command_Result_Notify p_status_ctrl_interface = 0;$/;"	v	file:
p_transparent_data_interface	DJI_LIB/DJI_Pro_App.cpp	/^static Command_Result_Notify p_transparent_data_interface = 0;$/;"	v	file:
p_user_handler_func	DJI_LIB/DJI_Pro_App.cpp	/^static User_Handler_Func p_user_handler_func = 0;$/;"	v	file:
p_user_rec_func	DJI_LIB/DJI_Pro_App.cpp	/^static Transparent_Transmission_Func p_user_rec_func = 0;$/;"	v	file:
padding	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int padding : 5;$/;"	m	struct:__anon18	access:public
padding	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int padding : 5;$/;"	m	struct:ProHeader	access:public
params	Config.h	/^		std::vector<double> params;$/;"	m	struct:Config::FeatureKernelPair	access:public
pattern	tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
pbuffer	DJI_LIB/DJI_Pro_Hw.h	/^    unsigned char *pbuffer;$/;"	m	class:DJI_Pro_Hw	access:private
pitch	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch;$/;"	m	struct:__anon9	access:public
pitch_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch_angle;$/;"	m	struct:__anon1	access:public
pitch_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short pitch_angle_rate;$/;"	m	struct:__anon3	access:public
pitch_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char pitch_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
pitch_or_y	DJI_LIB/DJI_Pro_App.h	/^    float	pitch_or_y;$/;"	m	struct:__anon17	access:public
pmem	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned char *pmem;$/;"	m	struct:MMU_Tab	access:public
port	DJI_LIB/DJI_Pro_Hw.h	/^    QextSerialPort *port;$/;"	m	class:DJI_Pro_Hw	access:private
pos	DJI_LIB/DJI_Pro_App.h	/^    api_pos_data_t pos;$/;"	m	struct:__anon12	access:public
pre_seq_num	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int pre_seq_num;$/;"	m	struct:CMD_Session_Tab	access:public
pre_timestamp	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int pre_timestamp;$/;"	m	struct:CMD_Session_Tab	access:public
ptr_aes256_codec	DJI_LIB/DJI_Pro_Codec.cpp	/^typedef void(*ptr_aes256_codec)(aes256_context *ctx, unsigned char *buf);$/;"	t	file:
ptr_filter_hook	DJI_LIB/DJI_Pro_Codec.h	/^typedef void(*ptr_filter_hook)(SDKHeader* p_head);$/;"	t
q	DJI_LIB/DJI_Pro_App.h	/^    api_quaternion_data_t q;$/;"	m	struct:__anon12	access:public
q0	DJI_LIB/DJI_Pro_App.h	/^    fp32 q0;$/;"	m	struct:__anon5	access:public
q1	DJI_LIB/DJI_Pro_App.h	/^    fp32 q1;$/;"	m	struct:__anon5	access:public
q2	DJI_LIB/DJI_Pro_App.h	/^    fp32 q2;$/;"	m	struct:__anon5	access:public
q3	DJI_LIB/DJI_Pro_App.h	/^    fp32 q3;$/;"	m	struct:__anon5	access:public
quietMode	Config.h	/^	bool							quietMode;$/;"	m	class:Config	access:public
rc	DJI_LIB/DJI_Pro_App.h	/^    api_rc_data_t rc;$/;"	m	struct:__anon12	access:public
rectangle	ImageThread.cpp	/^void rectangle (Mat& rMat, const FloatRect& rRect, const Scalar& rColour)$/;"	f	signature:(Mat& rMat, const FloatRect& rRect, const Scalar& rColour)
rectangle	ImageThread.h	/^void rectangle(Mat&,const FloatRect&,const Scalar&);$/;"	p	signature:(Mat&,const FloatRect&,const Scalar&)
recv_index	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short recv_index;$/;"	m	struct:__anon19	access:public
refCount	LaRank.h	/^		int refCount;$/;"	m	struct:LaRank::SupportPattern	access:public
req_id_t	DJI_LIB/DJI_Pro_App.h	/^}req_id_t;$/;"	t	typeref:struct:__anon13
res	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int res:25;$/;"	m	struct:ACK_Session_Tab	access:public
reserve	DJI_LIB/DJI_Pro_App.h	/^        unsigned char reserve : 4;$/;"	m	struct:__anon1::__anon2	access:public
reserve	DJI_LIB/DJI_Pro_App.h	/^        unsigned char reserve : 7;$/;"	m	struct:__anon3::__anon4	access:public
reserve	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	reserve	   	: 2;$/;"	m	struct:__anon13	access:public
reserve	DJI_LIB/DJI_Pro_App.h	/^    unsigned char reserve             :3;$/;"	m	struct:__anon7	access:public
reserved	DJI_LIB/DJI_Pro_App.h	/^    unsigned char reserved                    :4;$/;"	m	struct:__anon11	access:public
resultsPath	Config.h	/^	std::string						resultsPath;$/;"	m	class:Config	access:public
retry_send_time	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int retry_send_time : 5;$/;"	m	struct:CMD_Session_Tab	access:public
retry_time	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short retry_time : 13;$/;"	m	struct:ProSendParameter	access:public
reuse_count	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short reuse_count;$/;"	m	struct:__anon19	access:public
reuse_index	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned short reuse_index;$/;"	m	struct:__anon19	access:public
reversed0	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int reversed0 : 2; \/\/ always 0$/;"	m	struct:__anon18	access:public
reversed0	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int reversed0 : 2; 	\/\/ always 0$/;"	m	struct:ProHeader	access:public
reversed1	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int reversed1 : 24;$/;"	m	struct:__anon18	access:public
reversed1	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int reversed1 : 24;$/;"	m	struct:ProHeader	access:public
rj_sbox	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char rj_sbox(unsigned char x)$/;"	f	signature:(unsigned char x)
rj_sbox	DJI_LIB/DJI_Pro_Codec.cpp	108;"	d	file:
rj_sbox_inv	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char rj_sbox_inv(unsigned char x)$/;"	f	signature:(unsigned char x)
rj_sbox_inv	DJI_LIB/DJI_Pro_Codec.cpp	109;"	d	file:
rj_xtime	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned char rj_xtime(unsigned char x)$/;"	f	signature:(unsigned char x)
roll	DJI_LIB/DJI_Pro_App.h	/^    signed short roll;$/;"	m	struct:__anon9	access:public
roll_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short roll_angle;$/;"	m	struct:__anon1	access:public
roll_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short roll_angle_rate;$/;"	m	struct:__anon3	access:public
roll_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char roll_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
roll_or_x	DJI_LIB/DJI_Pro_App.h	/^    float 	roll_or_x;$/;"	m	struct:__anon17	access:public
run	DJI_LIB/DJI_Pro_Hw.cpp	/^void DJI_Pro_Hw::run()$/;"	f	class:DJI_Pro_Hw	signature:()
run	DJI_LIB/DJI_Pro_Hw.h	/^    void run();$/;"	p	class:DJI_Pro_Hw	access:protected	signature:()
sbox	DJI_LIB/DJI_Pro_Codec.cpp	/^const unsigned char sbox[256] ={$/;"	v
sboxinv	DJI_LIB/DJI_Pro_Codec.cpp	/^const unsigned char sboxinv[256] ={$/;"	v
sdk_byte_stream_handler	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_byte_stream_handler(SDKFilter* p_filter, unsigned char in_data)$/;"	f	signature:(SDKFilter* p_filter, unsigned char in_data)
sdk_call_data_app	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_call_data_app(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_check_stream_state	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_check_stream_state(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_comm_set_key	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_comm_set_key(SDKFilter* p_filter, const char* sz_key)$/;"	f	signature:(SDKFilter* p_filter, const char* sz_key)
sdk_encrypt_interface	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned short sdk_encrypt_interface(unsigned char *pdest, const unsigned char *psrc,$/;"	f	signature:(unsigned char *pdest, const unsigned char *psrc, unsigned short w_len,unsigned char is_ack,unsigned char is_enc,unsigned char session_id, unsigned short seq_num)
sdk_encrypt_interface	DJI_LIB/DJI_Pro_Codec.h	/^unsigned short sdk_encrypt_interface(unsigned char *pdest, const unsigned char *psrc,$/;"	p	signature:(unsigned char *pdest, const unsigned char *psrc, unsigned short w_len,unsigned char is_ack,unsigned char is_enc,unsigned char session_id,unsigned short seq_num)
sdk_serial_byte_handle	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_serial_byte_handle(unsigned char in_data)$/;"	f	signature:(unsigned char in_data)
sdk_serial_byte_handle	DJI_LIB/DJI_Pro_Codec.h	/^void sdk_serial_byte_handle(unsigned char in_data);$/;"	p	signature:(unsigned char in_data)
sdk_serial_set_hook	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_serial_set_hook(ptr_filter_hook p_hook)$/;"	f	signature:(ptr_filter_hook p_hook)
sdk_serial_set_hook	DJI_LIB/DJI_Pro_Codec.h	/^void sdk_serial_set_hook(ptr_filter_hook p_hook);$/;"	p	signature:(ptr_filter_hook p_hook)
sdk_set_encrypt_key_interface	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_set_encrypt_key_interface(const char* sz_key)$/;"	f	signature:(const char* sz_key)
sdk_set_encrypt_key_interface	DJI_LIB/DJI_Pro_Codec.h	/^void sdk_set_encrypt_key_interface(const char* sz_key);$/;"	p	signature:(const char* sz_key)
sdk_std_msg_t	DJI_LIB/DJI_Pro_App.h	/^}sdk_std_msg_t;$/;"	t	typeref:struct:__anon12
sdk_stream_codec	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_codec(SDKFilter* p_filter, SDKHeader* p_head, ptr_aes256_codec codec_func)$/;"	f	signature:(SDKFilter* p_filter, SDKHeader* p_head, ptr_aes256_codec codec_func)
sdk_stream_crc16_calc	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned short sdk_stream_crc16_calc(const unsigned char* pMsg, unsigned int nLen)$/;"	f	signature:(const unsigned char* pMsg, unsigned int nLen)
sdk_stream_crc16_calc	DJI_LIB/DJI_Pro_Codec.h	/^unsigned short sdk_stream_crc16_calc(const unsigned char* pMsg, unsigned int nLen);$/;"	p	signature:(const unsigned char* pMsg, unsigned int nLen)
sdk_stream_crc32_calc	DJI_LIB/DJI_Pro_Codec.cpp	/^unsigned int sdk_stream_crc32_calc(const unsigned char* pMsg, unsigned int nLen)$/;"	f	signature:(const unsigned char* pMsg, unsigned int nLen)
sdk_stream_crc32_calc	DJI_LIB/DJI_Pro_Codec.h	/^unsigned int sdk_stream_crc32_calc(const unsigned char* pMsg, unsigned int nLen);$/;"	p	signature:(const unsigned char* pMsg, unsigned int nLen)
sdk_stream_prepare	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_prepare(SDKFilter* p_filter, SDKHeader* p_head)$/;"	f	signature:(SDKFilter* p_filter, SDKHeader* p_head)
sdk_stream_recalc_crc	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_recalc_crc(void* p_data)$/;"	f	signature:(void* p_data)
sdk_stream_recalc_crc	DJI_LIB/DJI_Pro_Codec.h	/^void sdk_stream_recalc_crc(void* p_data);$/;"	p	signature:(void* p_data)
sdk_stream_shift_data	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_shift_data(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_stream_store_data	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_store_data(SDKFilter* p_filter, unsigned char in_data)$/;"	f	signature:(SDKFilter* p_filter, unsigned char in_data)
sdk_stream_update_reuse_part	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_update_reuse_part(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_stream_verify_data	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_verify_data(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_stream_verify_head	DJI_LIB/DJI_Pro_Codec.cpp	/^void sdk_stream_verify_head(SDKFilter* p_filter)$/;"	f	signature:(SDKFilter* p_filter)
sdk_transform2byte	DJI_LIB/DJI_Pro_Codec.cpp	/^static void sdk_transform2byte(const char *pstr,unsigned char *pdata)$/;"	f	file:	signature:(const char *pstr,unsigned char *pdata)
searchRadius	Config.h	/^	int								searchRadius;$/;"	m	class:Config	access:public
seed	Config.h	/^	int								seed;$/;"	m	class:Config	access:public
selectObject	ImageThread.cpp	/^bool selectObject = false;$/;"	v
selectionRegion	ImageThread.cpp	/^IntRect selectionRegion;$/;"	v
sent_time	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int sent_time : 5;$/;"	m	struct:CMD_Session_Tab	access:public
seq_num	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short seq_num;$/;"	m	struct:ProAckParameter	access:public
sequenceBasePath	Config.h	/^	std::string						sequenceBasePath;$/;"	m	class:Config	access:public
sequenceName	Config.h	/^	std::string						sequenceName;$/;"	m	class:Config	access:public
sequence_number	DJI_LIB/DJI_Pro_App.h	/^    unsigned short	sequence_number;$/;"	m	struct:__anon13	access:public
sequence_number	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int sequence_number : 16;$/;"	m	struct:__anon18	access:public
sequence_number	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int sequence_number : 16;$/;"	m	struct:ProHeader	access:public
serial_fd	DJI_LIB/DJI_Pro_Hw.cpp	/^static int serial_fd = -1;$/;"	v	file:
serial_fd_set	DJI_LIB/DJI_Pro_Hw.cpp	/^static fd_set serial_fd_set;$/;"	v	file:
serial_hook	DJI_LIB/DJI_Pro_Codec.cpp	/^ptr_filter_hook serial_hook = (ptr_filter_hook)Pro_Link_Recv_Hook;$/;"	v
serial_object	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw *DJI_Pro_Hw::serial_object = (DJI_Pro_Hw *)NULL;$/;"	m	class:DJI_Pro_Hw	file:
serial_object	DJI_LIB/DJI_Pro_Hw.h	/^    static DJI_Pro_Hw *serial_object;$/;"	m	class:DJI_Pro_Hw	access:public
serial_req_status	DJI_LIB/DJI_Pro_App.h	/^    unsigned char serial_req_status           :1;\/*1->opensd  0->close*\/$/;"	m	struct:__anon11	access:public
serial_sdk	DJI_LIB/DJI_Pro_Codec.cpp	/^SDKFilter serial_sdk = { 0 };$/;"	v
session_id	DJI_LIB/DJI_Pro_App.h	/^    unsigned char	session_id 	: 5;$/;"	m	struct:__anon13	access:public
session_id	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int session_id : 5;$/;"	m	struct:__anon18	access:public
session_id	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int session_id : 5;$/;"	m	struct:ProHeader	access:public
session_id	DJI_LIB/DJI_Pro_Link.h	/^	unsigned short session_id : 8;$/;"	m	struct:ProAckParameter	access:public
session_id	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_id : 5;$/;"	m	struct:ACK_Session_Tab	access:public
session_id	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_id : 5;$/;"	m	struct:CMD_Session_Tab	access:public
session_mode	DJI_LIB/DJI_Pro_Link.h	/^    unsigned short session_mode : 2;$/;"	m	struct:ProSendParameter	access:public
session_status	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int session_status:2;$/;"	m	struct:ACK_Session_Tab	access:public
setCustomGraphColor	GraphUtils.cpp	/^void setCustomGraphColor(int R, int B, int G)$/;"	f	signature:(int R, int B, int G)
setCustomGraphColor	GraphUtils.h	/^void setCustomGraphColor(int R, int B, int G);$/;"	p	signature:(int R, int B, int G)
setGraphColor	GraphUtils.cpp	/^void setGraphColor(int index)$/;"	f	signature:(int index)
setGraphColor	GraphUtils.h	/^void setGraphColor(int index DEFAULT(0));$/;"	p	signature:(int index DEFAULT(0))
showFloatGraph	GraphUtils.cpp	/^void showFloatGraph(const char *name, const float *arraySrc, int nArrayLength, int delay_ms, IplImage *background)$/;"	f	signature:(const char *name, const float *arraySrc, int nArrayLength, int delay_ms, IplImage *background)
showFloatGraph	GraphUtils.h	/^void showFloatGraph(const char *name, const float *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0));$/;"	p	signature:(const char *name, const float *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0))
showImage	GraphUtils.cpp	/^void showImage(const IplImage *img, int delay_ms, char *name)$/;"	f	signature:(const IplImage *img, int delay_ms, char *name)
showImage	GraphUtils.h	/^void showImage(const IplImage *img, int delay_ms DEFAULT(0), char *name DEFAULT(0));$/;"	p	signature:(const IplImage *img, int delay_ms DEFAULT(0), char *name DEFAULT(0))
showIntGraph	GraphUtils.cpp	/^void showIntGraph(const char *name, const int *arraySrc, int nArrayLength, int delay_ms, IplImage *background)$/;"	f	signature:(const char *name, const int *arraySrc, int nArrayLength, int delay_ms, IplImage *background)
showIntGraph	GraphUtils.h	/^void showIntGraph(const char *name, const int *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0));$/;"	p	signature:(const char *name, const int *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0))
showUCharGraph	GraphUtils.cpp	/^void showUCharGraph(const char *name, const uchar *arraySrc, int nArrayLength, int delay_ms, IplImage *background)$/;"	f	signature:(const char *name, const uchar *arraySrc, int nArrayLength, int delay_ms, IplImage *background)
showUCharGraph	GraphUtils.h	/^void showUCharGraph(const char *name, const uchar *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0));$/;"	p	signature:(const char *name, const uchar *arraySrc, int nArrayLength, int delay_ms DEFAULT(500), IplImage *background DEFAULT(0))
sof	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int sof : 8; \/\/ 1byte$/;"	m	struct:__anon18	access:public
sof	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int sof : 8; 			\/\/ 1byte$/;"	m	struct:ProHeader	access:public
sprintf_s	GraphUtils.cpp	28;"	d	file:
startTrack	ImageThread.cpp	/^bool startTrack = false;$/;"	v
status	DJI_LIB/DJI_Pro_App.h	/^    unsigned char status;$/;"	m	struct:__anon12	access:public
status_ctrl_cmd_data	DJI_LIB/DJI_Pro_App.cpp	/^static cmd_agency_data_t status_ctrl_cmd_data = {0,0};$/;"	v	file:
status_ctrl_lock	DJI_LIB/DJI_Pro_App.cpp	/^static int status_ctrl_lock = -1;$/;"	v	file:
status_ctrl_return_code	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned short status_ctrl_return_code = SDK_ERR_NO_RESPONSE;$/;"	v	file:
std_broadcast_data	DJI_LIB/DJI_Pro_App.cpp	/^static sdk_std_msg_t std_broadcast_data;$/;"	v	file:
std_msg_flag	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned short std_msg_flag = 0;$/;"	v	file:
std_msg_lock	DJI_LIB/DJI_Pro_App.cpp	/^static pthread_mutex_t std_msg_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
svmBudgetSize	Config.h	/^	int								svmBudgetSize;$/;"	m	class:Config	access:public
svmC	Config.h	/^	double							svmC;$/;"	m	class:Config	access:public
tab_index	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int tab_index : 8;$/;"	m	struct:MMU_Tab	access:public
tagAES256Context	DJI_LIB/DJI_Pro_Codec.cpp	/^typedef struct tagAES256Context {$/;"	s	file:
tagAES256Context::deckey	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char deckey[32];$/;"	m	struct:tagAES256Context	file:	access:public
tagAES256Context::enckey	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char enckey[32];$/;"	m	struct:tagAES256Context	file:	access:public
tagAES256Context::key	DJI_LIB/DJI_Pro_Codec.cpp	/^    unsigned char key[32];$/;"	m	struct:tagAES256Context	file:	access:public
target_location	ImageThread.cpp	/^Imagepoint target_location;$/;"	v
thr_z	DJI_LIB/DJI_Pro_App.h	/^    float	thr_z;$/;"	m	struct:__anon17	access:public
throttle	DJI_LIB/DJI_Pro_App.h	/^    signed short throttle;$/;"	m	struct:__anon9	access:public
time_stamp	DJI_LIB/DJI_Pro_App.h	/^    unsigned int time_stamp;$/;"	m	struct:__anon12	access:public
tinyxml2	tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
tinyxml2	tinyxml2.h	/^namespace tinyxml2$/;"	n
tinyxml2::COLLAPSE_WHITESPACE	tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::DynArray	tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
tinyxml2::DynArray::Capacity	tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::DynArray	tinyxml2.h	/^    DynArray( const DynArray& ); \/\/ not supported$/;"	p	class:tinyxml2::DynArray	access:private	signature:( const DynArray& )
tinyxml2::DynArray::DynArray	tinyxml2.h	/^    DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Empty	tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::EnsureCapacity	tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
tinyxml2::DynArray::Mem	tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Mem	tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::PeekTop	tinyxml2.h	/^    const T& PeekTop() const            {$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Pop	tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::PopArr	tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Push	tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
tinyxml2::DynArray::PushArr	tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Size	tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::_allocated	tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_mem	tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_pool	tinyxml2.h	/^    T   _pool[INITIAL_SIZE];$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_size	tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::operator =	tinyxml2.h	/^    void operator=( const DynArray& ); \/\/ not supported$/;"	p	class:tinyxml2::DynArray	access:private	signature:( const DynArray& )
tinyxml2::DynArray::operator []	tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
tinyxml2::DynArray::operator []	tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
tinyxml2::DynArray::~DynArray	tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::Entity	tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
tinyxml2::Entity::length	tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::pattern	tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::value	tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::MemPool	tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
tinyxml2::MemPool::Alloc	tinyxml2.h	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::Clear	tinyxml2.h	/^    virtual void Clear() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::Free	tinyxml2.h	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
tinyxml2::MemPool::ItemSize	tinyxml2.h	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
tinyxml2::MemPool::MemPool	tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::SetTracked	tinyxml2.h	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::~MemPool	tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPoolT	tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
tinyxml2::MemPoolT::Alloc	tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Block	tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Block::chunk	tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
tinyxml2::MemPoolT::COUNT	tinyxml2.h	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon23
tinyxml2::MemPoolT::Chunk	tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Chunk::mem	tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::Chunk::next	tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::Clear	tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::CurrentAllocs	tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::Free	tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
tinyxml2::MemPoolT::ItemSize	tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::MemPoolT	tinyxml2.h	/^    MemPoolT( const MemPoolT& ); \/\/ not supported$/;"	p	class:tinyxml2::MemPoolT	access:private	signature:( const MemPoolT& )
tinyxml2::MemPoolT::MemPoolT	tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::SetTracked	tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Trace	tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
tinyxml2::MemPoolT::Untracked	tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::_blockPtrs	tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_currentAllocs	tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_maxAllocs	tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nAllocs	tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nUntracked	tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_root	tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::operator =	tinyxml2.h	/^    void operator=( const MemPoolT& ); \/\/ not supported$/;"	p	class:tinyxml2::MemPoolT	access:private	signature:( const MemPoolT& )
tinyxml2::MemPoolT::~MemPoolT	tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::NUM_ENTITIES	tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
tinyxml2::PRESERVE_WHITESPACE	tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::StrPair	tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
tinyxml2::StrPair::ATTRIBUTE_NAME	tinyxml2.h	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::ATTRIBUTE_VALUE	tinyxml2.h	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES	tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::COMMENT	tinyxml2.h	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::CollapseWhitespace	tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::CollapseWhitespace	tinyxml2.h	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Empty	tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
tinyxml2::StrPair::GetStr	tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::GetStr	tinyxml2.h	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::NEEDS_DELETE	tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon22
tinyxml2::StrPair::NEEDS_ENTITY_PROCESSING	tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::NEEDS_FLUSH	tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon22
tinyxml2::StrPair::NEEDS_NEWLINE_NORMALIZATION	tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::NEEDS_WHITESPACE_COLLAPSING	tinyxml2.h	/^        NEEDS_WHITESPACE_COLLAPSING     = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::ParseName	tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
tinyxml2::StrPair::ParseName	tinyxml2.h	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
tinyxml2::StrPair::ParseText	tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
tinyxml2::StrPair::ParseText	tinyxml2.h	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
tinyxml2::StrPair::Reset	tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::Reset	tinyxml2.h	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Set	tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
tinyxml2::StrPair::SetInternedStr	tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
tinyxml2::StrPair::SetStr	tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
tinyxml2::StrPair::SetStr	tinyxml2.h	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
tinyxml2::StrPair::StrPair	tinyxml2.h	/^    StrPair( const StrPair& other );	\/\/ not supported$/;"	p	class:tinyxml2::StrPair	access:private	signature:( const StrPair& other )
tinyxml2::StrPair::StrPair	tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::TEXT_ELEMENT	tinyxml2.h	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::TEXT_ELEMENT_LEAVE_ENTITIES	tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon21
tinyxml2::StrPair::TransferTo	tinyxml2.cpp	/^void StrPair::TransferTo( StrPair* other )$/;"	f	class:tinyxml2::StrPair	signature:( StrPair* other )
tinyxml2::StrPair::TransferTo	tinyxml2.h	/^    void TransferTo( StrPair* other );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( StrPair* other )
tinyxml2::StrPair::_end	tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_flags	tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_start	tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::operator =	tinyxml2.h	/^    void operator=( StrPair& other );	\/\/ not supported, use TransferTo()$/;"	p	class:tinyxml2::StrPair	access:private	signature:( StrPair& other )
tinyxml2::StrPair::~StrPair	tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::~StrPair	tinyxml2.h	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::Whitespace	tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
tinyxml2::XMLAttribute	tinyxml2.h	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
tinyxml2::XMLAttribute::BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon24
tinyxml2::XMLAttribute::BoolValue	tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::DoubleValue	tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::FloatValue	tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::IntValue	tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Name	tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
tinyxml2::XMLAttribute::Name	tinyxml2.h	/^    const char* Name() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Next	tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::ParseDeep	tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::QueryBoolValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryBoolValue	tinyxml2.h	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	tinyxml2.h	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	tinyxml2.h	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryIntValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryIntValue	tinyxml2.h	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	tinyxml2.h	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
tinyxml2::XMLAttribute::SetAttribute	tinyxml2.h	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
tinyxml2::XMLAttribute::SetName	tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
tinyxml2::XMLAttribute::SetName	tinyxml2.h	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
tinyxml2::XMLAttribute::UnsignedValue	tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Value	tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
tinyxml2::XMLAttribute::Value	tinyxml2.h	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::XMLAttribute	tinyxml2.h	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::XMLAttribute	tinyxml2.h	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLAttribute::_memPool	tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_name	tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_next	tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_value	tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::operator =	tinyxml2.h	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::~XMLAttribute	tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLComment	tinyxml2.h	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLComment::Accept	tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::ParseDeep	tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
tinyxml2::XMLComment::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( char*, StrPair* endTag )
tinyxml2::XMLComment::ShallowClone	tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
tinyxml2::XMLComment::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLComment::ShallowEqual	tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ToComment	tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
tinyxml2::XMLComment::ToComment	tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
tinyxml2::XMLComment::XMLComment	tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	tinyxml2.h	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	tinyxml2.h	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:private	signature:( const XMLComment& )
tinyxml2::XMLComment::operator =	tinyxml2.h	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:private	signature:( const XMLComment& )
tinyxml2::XMLComment::~XMLComment	tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
tinyxml2::XMLComment::~XMLComment	tinyxml2.h	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
tinyxml2::XMLConstHandle	tinyxml2.h	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLConstHandle::FirstChild	tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::FirstChildElement	tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLConstHandle::LastChild	tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::LastChildElement	tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLConstHandle::NextSibling	tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::NextSiblingElement	tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* name = 0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLConstHandle::PreviousSibling	tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::PreviousSiblingElement	tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* name = 0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLConstHandle::ToDeclaration	tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToElement	tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToNode	tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToText	tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToUnknown	tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLConstHandle::XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
tinyxml2::XMLConstHandle::XMLConstHandle	tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
tinyxml2::XMLConstHandle::_node	tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
tinyxml2::XMLConstHandle::operator =	tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLDeclaration	tinyxml2.h	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDeclaration::Accept	tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::ParseDeep	tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
tinyxml2::XMLDeclaration::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( char*, StrPair* endTag )
tinyxml2::XMLDeclaration::ShallowClone	tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
tinyxml2::XMLDeclaration::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLDeclaration::ShallowEqual	tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
tinyxml2::XMLDeclaration::ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
tinyxml2::XMLDeclaration::XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	tinyxml2.h	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	tinyxml2.h	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:private	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::operator =	tinyxml2.h	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:private	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::~XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
tinyxml2::XMLDeclaration::~XMLDeclaration	tinyxml2.h	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
tinyxml2::XMLDocument	tinyxml2.h	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDocument::Accept	tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Clear	tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::Clear	tinyxml2.h	/^    void Clear();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::DeleteNode	tinyxml2.cpp	/^void XMLDocument::DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLNode* node )
tinyxml2::XMLDocument::DeleteNode	tinyxml2.h	/^    void DeleteNode( XMLNode* node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
tinyxml2::XMLDocument::Error	tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ErrorID	tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ErrorName	tinyxml2.cpp	/^const char* XMLDocument::ErrorName() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
tinyxml2::XMLDocument::ErrorName	tinyxml2.h	/^	const char* ErrorName() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr1	tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr2	tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::HasBOM	tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::Identify	tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::Identify	tinyxml2.h	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
tinyxml2::XMLDocument::LoadFile	tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
tinyxml2::XMLDocument::LoadFile	tinyxml2.h	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
tinyxml2::XMLDocument::LoadFile	tinyxml2.h	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
tinyxml2::XMLDocument::NewComment	tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewComment	tinyxml2.h	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
tinyxml2::XMLDocument::NewDeclaration	tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewDeclaration	tinyxml2.h	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
tinyxml2::XMLDocument::NewElement	tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
tinyxml2::XMLDocument::NewElement	tinyxml2.h	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
tinyxml2::XMLDocument::NewText	tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewText	tinyxml2.h	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::NewUnknown	tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewUnknown	tinyxml2.h	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::Parse	tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
tinyxml2::XMLDocument::Parse	tinyxml2.cpp	/^void XMLDocument::Parse()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::Parse	tinyxml2.h	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
tinyxml2::XMLDocument::Parse	tinyxml2.h	/^    void Parse();$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:()
tinyxml2::XMLDocument::Print	tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer ) const
tinyxml2::XMLDocument::Print	tinyxml2.h	/^    void Print( XMLPrinter* streamer=0 ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 ) const
tinyxml2::XMLDocument::PrintError	tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
tinyxml2::XMLDocument::PrintError	tinyxml2.h	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ProcessEntities	tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::RootElement	tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::RootElement	tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
tinyxml2::XMLDocument::SaveFile	tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
tinyxml2::XMLDocument::SaveFile	tinyxml2.h	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
tinyxml2::XMLDocument::SaveFile	tinyxml2.h	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
tinyxml2::XMLDocument::SetBOM	tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
tinyxml2::XMLDocument::SetError	tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::SetError	tinyxml2.h	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
tinyxml2::XMLDocument::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
tinyxml2::XMLDocument::ToDocument	tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::ToDocument	tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::WhitespaceMode	tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::XMLDocument	tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
tinyxml2::XMLDocument::XMLDocument	tinyxml2.h	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
tinyxml2::XMLDocument::XMLDocument	tinyxml2.h	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::_attributePool	tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_charBuffer	tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_commentPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_elementPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorID	tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorNames	tinyxml2.cpp	/^const char* XMLDocument::_errorNames[XML_ERROR_COUNT] = {$/;"	m	class:tinyxml2::XMLDocument	file:
tinyxml2::XMLDocument::_errorNames	tinyxml2.h	/^	static const char* _errorNames[XML_ERROR_COUNT];$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr1	tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr2	tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_processEntities	tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_textPool	tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_whitespace	tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_writeBOM	tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::operator =	tinyxml2.h	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::~XMLDocument	tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::~XMLDocument	tinyxml2.h	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLElement	tinyxml2.h	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLElement::Accept	tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Attribute	tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
tinyxml2::XMLElement::Attribute	tinyxml2.h	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
tinyxml2::XMLElement::BUF_SIZE	tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon26
tinyxml2::XMLElement::BoolAttribute	tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::CLOSED	tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon25
tinyxml2::XMLElement::CLOSING	tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon25
tinyxml2::XMLElement::ClosingType	tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLElement	signature:( XMLAttribute* attribute )
tinyxml2::XMLElement::DeleteAttribute	tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::DeleteAttribute	tinyxml2.h	/^    static void DeleteAttribute( XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLAttribute* attribute )
tinyxml2::XMLElement::DeleteAttribute	tinyxml2.h	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
tinyxml2::XMLElement::DoubleAttribute	tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	tinyxml2.h	/^    XMLAttribute* FindAttribute( const char* name ) {$/;"	f	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	tinyxml2.h	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindOrCreateAttribute	tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::FindOrCreateAttribute	tinyxml2.h	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FirstAttribute	tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::FloatAttribute	tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::GetText	tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
tinyxml2::XMLElement::GetText	tinyxml2.h	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::IntAttribute	tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::Name	tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::OPEN	tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon25
tinyxml2::XMLElement::ParseAttributes	tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
tinyxml2::XMLElement::ParseAttributes	tinyxml2.h	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
tinyxml2::XMLElement::ParseDeep	tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
tinyxml2::XMLElement::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:protected	signature:( char* p, StrPair* endTag )
tinyxml2::XMLElement::QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryAttribute	tinyxml2.h	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryBoolAttribute	tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryBoolText	tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryBoolText	tinyxml2.h	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryDoubleAttribute	tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryDoubleText	tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
tinyxml2::XMLElement::QueryDoubleText	tinyxml2.h	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
tinyxml2::XMLElement::QueryFloatAttribute	tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryFloatText	tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
tinyxml2::XMLElement::QueryFloatText	tinyxml2.h	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
tinyxml2::XMLElement::QueryIntAttribute	tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryIntText	tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
tinyxml2::XMLElement::QueryIntText	tinyxml2.h	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
tinyxml2::XMLElement::QueryUnsignedAttribute	tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryUnsignedText	tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
tinyxml2::XMLElement::QueryUnsignedText	tinyxml2.h	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float value )
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
tinyxml2::XMLElement::SetAttribute	tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLElement::SetName	tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* inText )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement	signature:( bool v )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement	signature:( double v )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement	signature:( float v )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement	signature:( int v )
tinyxml2::XMLElement::SetText	tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement	signature:( unsigned v )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^	void SetText( const char* inText );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* inText )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^    void SetText( bool value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool value )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^    void SetText( double value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double value )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^    void SetText( float value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float value )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^    void SetText( int value );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int value )
tinyxml2::XMLElement::SetText	tinyxml2.h	/^    void SetText( unsigned value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned value )
tinyxml2::XMLElement::ShallowClone	tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
tinyxml2::XMLElement::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLElement::ShallowEqual	tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ToElement	tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
tinyxml2::XMLElement::ToElement	tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::UnsignedAttribute	tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::XMLElement	tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	tinyxml2.h	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	tinyxml2.h	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::_closingType	tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::_rootAttribute	tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::operator =	tinyxml2.h	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::~XMLElement	tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
tinyxml2::XMLElement::~XMLElement	tinyxml2.h	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
tinyxml2::XMLError	tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
tinyxml2::XMLHandle	tinyxml2.h	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLHandle::FirstChild	tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::FirstChildElement	tinyxml2.h	/^    XMLHandle FirstChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
tinyxml2::XMLHandle::LastChild	tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::LastChildElement	tinyxml2.h	/^    XMLHandle LastChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
tinyxml2::XMLHandle::NextSibling	tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::NextSiblingElement	tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* name = 0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
tinyxml2::XMLHandle::PreviousSibling	tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::PreviousSiblingElement	tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* name = 0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* name = 0 )
tinyxml2::XMLHandle::ToDeclaration	tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToElement	tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToNode	tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToText	tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToUnknown	tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
tinyxml2::XMLHandle::XMLHandle	tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
tinyxml2::XMLHandle::XMLHandle	tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLHandle::_node	tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
tinyxml2::XMLHandle::operator =	tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLNode	tinyxml2.h	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
tinyxml2::XMLNode::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLNode::DeleteChild	tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChild	tinyxml2.h	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChildren	tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::DeleteChildren	tinyxml2.h	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::DeleteNode	tinyxml2.cpp	/^void XMLNode::DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteNode	tinyxml2.h	/^    static void DeleteNode( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* node )
tinyxml2::XMLNode::FirstChild	tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::FirstChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
tinyxml2::XMLNode::FirstChildElement	tinyxml2.h	/^    XMLElement* FirstChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
tinyxml2::XMLNode::FirstChildElement	tinyxml2.h	/^    const XMLElement* FirstChildElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLNode::GetDocument	tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::GetDocument	tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::InsertAfterChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertAfterChild	tinyxml2.h	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertChildPreamble	tinyxml2.cpp	/^void XMLNode::InsertChildPreamble( XMLNode* insertThis ) const$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* insertThis ) const
tinyxml2::XMLNode::InsertChildPreamble	tinyxml2.h	/^    void InsertChildPreamble( XMLNode* insertThis ) const;$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* insertThis ) const
tinyxml2::XMLNode::InsertEndChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	tinyxml2.h	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	tinyxml2.h	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::LastChild	tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::LastChild	tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::LastChildElement	tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
tinyxml2::XMLNode::LastChildElement	tinyxml2.h	/^    XMLElement* LastChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
tinyxml2::XMLNode::LastChildElement	tinyxml2.h	/^    const XMLElement* LastChildElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLNode::LinkEndChild	tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::NextSibling	tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::NextSibling	tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::NextSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
tinyxml2::XMLNode::NextSiblingElement	tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
tinyxml2::XMLNode::NextSiblingElement	tinyxml2.h	/^    const XMLElement*	NextSiblingElement( const char* name = 0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLNode::NoChildren	tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Parent	tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::Parent	tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ParseDeep	tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
tinyxml2::XMLNode::ParseDeep	tinyxml2.h	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( char*, StrPair* )
tinyxml2::XMLNode::PreviousSibling	tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::PreviousSibling	tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::PreviousSiblingElement	tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* name ) const
tinyxml2::XMLNode::PreviousSiblingElement	tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* name = 0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 )
tinyxml2::XMLNode::PreviousSiblingElement	tinyxml2.h	/^    const XMLElement*	PreviousSiblingElement( const char* name = 0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* name = 0 ) const
tinyxml2::XMLNode::SetValue	tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
tinyxml2::XMLNode::SetValue	tinyxml2.h	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
tinyxml2::XMLNode::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLNode::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLNode::ToComment	tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToComment	tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDeclaration	tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDeclaration	tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDocument	tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDocument	tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToElement	tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToElement	tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToText	tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToText	tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Unlink	tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
tinyxml2::XMLNode::Unlink	tinyxml2.h	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
tinyxml2::XMLNode::Value	tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode	signature:() const
tinyxml2::XMLNode::Value	tinyxml2.h	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::XMLNode	tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
tinyxml2::XMLNode::XMLNode	tinyxml2.h	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
tinyxml2::XMLNode::XMLNode	tinyxml2.h	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( const XMLNode& )
tinyxml2::XMLNode::_document	tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_firstChild	tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_lastChild	tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_memPool	tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
tinyxml2::XMLNode::_next	tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_parent	tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_prev	tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_value	tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::operator =	tinyxml2.h	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( const XMLNode& )
tinyxml2::XMLNode::~XMLNode	tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::~XMLNode	tinyxml2.h	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
tinyxml2::XMLPrinter	tinyxml2.h	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
tinyxml2::XMLPrinter::BUF_SIZE	tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon27
tinyxml2::XMLPrinter::CStr	tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CStrSize	tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::ClearBuffer	tinyxml2.h	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLPrinter::CloseElement	tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool compactMode )
tinyxml2::XMLPrinter::CloseElement	tinyxml2.h	/^    virtual void CloseElement( bool compactMode=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool compactMode=false )
tinyxml2::XMLPrinter::CompactMode	tinyxml2.h	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }$/;"	f	class:tinyxml2::XMLPrinter	access:protected	signature:( const XMLElement& )
tinyxml2::XMLPrinter::ENTITY_RANGE	tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon27
tinyxml2::XMLPrinter::OpenElement	tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool compactMode )
tinyxml2::XMLPrinter::OpenElement	tinyxml2.h	/^    void OpenElement( const char* name, bool compactMode=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool compactMode=false )
tinyxml2::XMLPrinter::Print	tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
tinyxml2::XMLPrinter::Print	tinyxml2.h	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( const char* format, ... )
tinyxml2::XMLPrinter::PrintSpace	tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
tinyxml2::XMLPrinter::PrintSpace	tinyxml2.h	/^    virtual void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( int depth )
tinyxml2::XMLPrinter::PrintString	tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
tinyxml2::XMLPrinter::PrintString	tinyxml2.h	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
tinyxml2::XMLPrinter::PushAttribute	tinyxml2.h	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLPrinter::PushComment	tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
tinyxml2::XMLPrinter::PushComment	tinyxml2.h	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
tinyxml2::XMLPrinter::PushDeclaration	tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushDeclaration	tinyxml2.h	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::PushHeader	tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
tinyxml2::XMLPrinter::PushHeader	tinyxml2.h	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
tinyxml2::XMLPrinter::PushText	tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
tinyxml2::XMLPrinter::PushText	tinyxml2.h	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
tinyxml2::XMLPrinter::PushUnknown	tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushUnknown	tinyxml2.h	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::SealElementIfJustOpened	tinyxml2.cpp	/^void XMLPrinter::SealElementIfJustOpened()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
tinyxml2::XMLPrinter::SealElementIfJustOpened	tinyxml2.h	/^    void SealElementIfJustOpened();$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:()
tinyxml2::XMLPrinter::Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
tinyxml2::XMLPrinter::VisitEnter	tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitExit	tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::XMLPrinter	tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact, int depth )
tinyxml2::XMLPrinter::XMLPrinter	tinyxml2.h	/^    XMLPrinter( FILE* file=0, bool compact = false, int depth = 0 );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false, int depth = 0 )
tinyxml2::XMLPrinter::_buffer	tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_compactMode	tinyxml2.h	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_depth	tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_elementJustOpened	tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
tinyxml2::XMLPrinter::_entityFlag	tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_firstElement	tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_fp	tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_processEntities	tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_restrictedEntityFlag	tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_stack	tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
tinyxml2::XMLPrinter::_textDepth	tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::~XMLPrinter	tinyxml2.h	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLText	tinyxml2.h	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLText::Accept	tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::CData	tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::ParseDeep	tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
tinyxml2::XMLText::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( char*, StrPair* endTag )
tinyxml2::XMLText::SetCData	tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
tinyxml2::XMLText::ShallowClone	tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
tinyxml2::XMLText::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLText::ShallowEqual	tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ToText	tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
tinyxml2::XMLText::ToText	tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::XMLText	tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLText::XMLText	tinyxml2.h	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:private	signature:( const XMLText& )
tinyxml2::XMLText::_isCData	tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
tinyxml2::XMLText::operator =	tinyxml2.h	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:private	signature:( const XMLText& )
tinyxml2::XMLText::~XMLText	tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
tinyxml2::XMLUnknown	tinyxml2.h	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLUnknown::Accept	tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::Accept	tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::ParseDeep	tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
tinyxml2::XMLUnknown::ParseDeep	tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( char*, StrPair* endTag )
tinyxml2::XMLUnknown::ShallowClone	tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
tinyxml2::XMLUnknown::ShallowClone	tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLUnknown::ShallowEqual	tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ShallowEqual	tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ToUnknown	tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
tinyxml2::XMLUnknown::ToUnknown	tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
tinyxml2::XMLUnknown::XMLUnknown	tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	tinyxml2.h	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	tinyxml2.h	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:private	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::operator =	tinyxml2.h	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:private	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::~XMLUnknown	tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
tinyxml2::XMLUnknown::~XMLUnknown	tinyxml2.h	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
tinyxml2::XMLUtil	tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	tinyxml2.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::GetCharacterRef	tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::GetCharacterRef	tinyxml2.h	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::IsNameChar	tinyxml2.h	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsNameStartChar	tinyxml2.h	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsUTF8Continuation	tinyxml2.h	/^    inline static bool IsUTF8Continuation( char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
tinyxml2::XMLUtil::IsWhiteSpace	tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
tinyxml2::XMLUtil::ReadBOM	tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
tinyxml2::XMLUtil::ReadBOM	tinyxml2.h	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
tinyxml2::XMLUtil::SkipWhiteSpace	tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
tinyxml2::XMLUtil::SkipWhiteSpace	tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
tinyxml2::XMLUtil::StringEqual	tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
tinyxml2::XMLUtil::ToBool	tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToBool	tinyxml2.h	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToDouble	tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToDouble	tinyxml2.h	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToFloat	tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToFloat	tinyxml2.h	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToInt	tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToInt	tinyxml2.h	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.h	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.h	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.h	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.h	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	tinyxml2.h	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToUnsigned	tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
tinyxml2::XMLUtil::ToUnsigned	tinyxml2.h	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
tinyxml2::XMLVisitor	tinyxml2.h	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
tinyxml2::XMLVisitor::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
tinyxml2::XMLVisitor::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
tinyxml2::XMLVisitor::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
tinyxml2::XMLVisitor::Visit	tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
tinyxml2::XMLVisitor::VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitEnter	tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
tinyxml2::XMLVisitor::VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitExit	tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
tinyxml2::XMLVisitor::~XMLVisitor	tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
tinyxml2::XML_CAN_NOT_CONVERT_TEXT	tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_COUNT	tinyxml2.h	/^	XML_ERROR_COUNT$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_ELEMENT_MISMATCH	tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_EMPTY_DOCUMENT	tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_COULD_NOT_BE_OPENED	tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_NOT_FOUND	tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_READ_ERROR	tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_IDENTIFYING_TAG	tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_MISMATCHED_ELEMENT	tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING	tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ATTRIBUTE	tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_CDATA	tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_COMMENT	tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_DECLARATION	tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ELEMENT	tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_TEXT	tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_UNKNOWN	tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ATTRIBUTE	tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ERROR	tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_TEXT_NODE	tinyxml2.h	/^    XML_NO_TEXT_NODE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_SUCCESS	tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_WRONG_ATTRIBUTE_TYPE	tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::callfopen	tinyxml2.cpp	/^static FILE* callfopen( const char* filepath, const char* mode )$/;"	f	namespace:tinyxml2	signature:( const char* filepath, const char* mode )
tinyxml2::entities	tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
to_user_activation_result	DJI_LIB/DJI_Pro_App.cpp	/^static unsigned short to_user_activation_result;$/;"	v	file:
to_user_version_data	DJI_LIB/DJI_Pro_App.cpp	/^static version_query_data_t to_user_version_data;$/;"	v	file:
trackObject	ImageThread.cpp	/^int trackObject = 0;$/;"	v
true	GraphUtils.h	18;"	d
usage_flag	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int usage_flag : 1;$/;"	m	struct:CMD_Session_Tab	access:public
usage_flag	DJI_LIB/DJI_Pro_Rmu.h	/^	unsigned int usage_flag : 8;$/;"	m	struct:MMU_Tab	access:public
usingCustomGraphColor	GraphUtils.cpp	/^int usingCustomGraphColor = 0;$/;"	v
v	DJI_LIB/DJI_Pro_App.h	/^    api_vel_data_t v;$/;"	m	struct:__anon12	access:public
value	tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
version	DJI_LIB/DJI_Pro_Codec.h	/^	unsigned int version : 6; \/\/ 2byte$/;"	m	struct:__anon18	access:public
version	DJI_LIB/DJI_Pro_Link.h	/^	unsigned int version : 6; 		\/\/ 2byte$/;"	m	struct:ProHeader	access:public
version_ack	DJI_LIB/DJI_Pro_App.h	/^    unsigned short	version_ack;$/;"	m	struct:__anon16	access:public
version_crc	DJI_LIB/DJI_Pro_App.h	/^    unsigned int	version_crc;$/;"	m	struct:__anon16	access:public
version_name	DJI_LIB/DJI_Pro_App.h	/^    char     	version_name[32];$/;"	m	struct:__anon16	access:public
version_query_data_t	DJI_LIB/DJI_Pro_App.h	/^}version_query_data_t;$/;"	t	typeref:struct:__anon16
w	DJI_LIB/DJI_Pro_App.h	/^    api_common_data_t w;$/;"	m	struct:__anon12	access:public
x	DJI_LIB/DJI_Pro_App.h	/^    fp32 x;$/;"	m	struct:__anon6	access:public
x	DJI_LIB/DJI_Pro_App.h	/^    fp32 x;$/;"	m	struct:__anon7	access:public
x	DJI_LIB/DJI_Pro_App.h	/^    signed short x;$/;"	m	struct:__anon10	access:public
x	ImageThread.h	/^    int x;$/;"	m	struct:__anon28	access:public
x	LaRank.h	/^		SupportPattern* x;$/;"	m	struct:LaRank::SupportVector	access:public
x	LaRank.h	/^		std::vector<Eigen::VectorXd> x;$/;"	m	struct:LaRank::SupportPattern	access:public
y	DJI_LIB/DJI_Pro_App.h	/^    fp32 y;$/;"	m	struct:__anon6	access:public
y	DJI_LIB/DJI_Pro_App.h	/^    fp32 y;$/;"	m	struct:__anon7	access:public
y	DJI_LIB/DJI_Pro_App.h	/^    signed short y;$/;"	m	struct:__anon10	access:public
y	ImageThread.h	/^    int y;$/;"	m	struct:__anon28	access:public
y	LaRank.h	/^		int y;$/;"	m	struct:LaRank::SupportPattern	access:public
y	LaRank.h	/^		int y;$/;"	m	struct:LaRank::SupportVector	access:public
yaw	DJI_LIB/DJI_Pro_App.h	/^    float	yaw;$/;"	m	struct:__anon17	access:public
yaw	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw;$/;"	m	struct:__anon9	access:public
yaw_angle	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw_angle;$/;"	m	struct:__anon1	access:public
yaw_angle_rate	DJI_LIB/DJI_Pro_App.h	/^    signed short yaw_angle_rate;$/;"	m	struct:__anon3	access:public
yaw_cmd_ignore	DJI_LIB/DJI_Pro_App.h	/^        unsigned char yaw_cmd_ignore : 1;$/;"	m	struct:__anon1::__anon2	access:public
yv	LaRank.h	/^		std::vector<FloatRect> yv;$/;"	m	struct:LaRank::SupportPattern	access:public
z	DJI_LIB/DJI_Pro_App.h	/^    fp32 z;$/;"	m	struct:__anon6	access:public
z	DJI_LIB/DJI_Pro_App.h	/^    fp32 z;$/;"	m	struct:__anon7	access:public
z	DJI_LIB/DJI_Pro_App.h	/^    signed short z;$/;"	m	struct:__anon10	access:public
~DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.cpp	/^DJI_Pro_Hw::~DJI_Pro_Hw()$/;"	f	class:DJI_Pro_Hw	signature:()
~DJI_Pro_Hw	DJI_LIB/DJI_Pro_Hw.h	/^    ~DJI_Pro_Hw();$/;"	p	class:DJI_Pro_Hw	access:public	signature:()
~DynArray	tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
~HaarFeature	HaarFeature.cpp	/^HaarFeature::~HaarFeature()$/;"	f	class:HaarFeature	signature:()
~HaarFeature	HaarFeature.h	/^	~HaarFeature();$/;"	p	class:HaarFeature	access:public	signature:()
~LaRank	LaRank.cpp	/^LaRank::~LaRank()$/;"	f	class:LaRank	signature:()
~LaRank	LaRank.h	/^	~LaRank();$/;"	p	class:LaRank	access:public	signature:()
~MemPool	tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
~MemPoolT	tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
~StrPair	tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
~StrPair	tinyxml2.h	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
~Tracker	Tracker.cpp	/^Tracker::~Tracker()$/;"	f	class:Tracker	signature:()
~Tracker	Tracker.h	/^	~Tracker();$/;"	p	class:Tracker	access:public	signature:()
~XMLAttribute	tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
~XMLComment	tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
~XMLComment	tinyxml2.h	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
~XMLDeclaration	tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
~XMLDeclaration	tinyxml2.h	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
~XMLDocument	tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
~XMLDocument	tinyxml2.h	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
~XMLElement	tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
~XMLElement	tinyxml2.h	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
~XMLNode	tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
~XMLNode	tinyxml2.h	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
~XMLPrinter	tinyxml2.h	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
~XMLText	tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
~XMLUnknown	tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
~XMLUnknown	tinyxml2.h	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
~XMLVisitor	tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
